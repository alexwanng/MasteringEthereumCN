[[ethereum_clients_chapter]]
== 以太坊客户端

((("clients, Ethereum", id="ix_03clients-asciidoc0", range="startofrange")))以太坊客户端是一个软件应用程序，它实现了以太坊规范，并通过对等网络与其他以太坊客户端进行通信。 如果不同的以太坊客户端符合参考规范和标准化的通信协议，它们就可以互操作。 虽然这些不同的客户端是由不同的团队以不同的编程语言实现的，但它们都"说"相同的协议并遵循相同的规则。 因此，它们都可以用来同一个以太坊网络做操作和交互。

以太坊是一个开放源码项目，所有主要客户端的源代码都可以通过开放源码许可(例如 LGPL v3.0)获得，可以免费下载并用于任何目的。 不过，开源并不仅仅意味着免费使用。 这也意味着以太坊是由一个开放的志愿者社区开发的，任何人都可以修改它。 更多的关注意味着更值得信赖的代码。

((("Yellow Paper specification")))黄皮书是以太坊的正式规范 (见 <<references>>).

这与例如比特币形成对比，比特币没有以任何正式方式定义。 比特币的“规范”是比特币核心的参考实现，以太坊的规范记录在一篇结合了英语和数学（正式）规范的论文中。 除了各种以太坊改进提案之外，此正式规范还定义了以太坊pass:[<span class="keep-together">客户端</span>]的标准行为。 随着对pass:[<span class="keep-together">以太坊</span>]的重大改变，黄皮书会定期更新。

由于以太坊明确的正式规范，以太网客户端有许多独立开发但可互操作的软件实现。 与其他任何区块链相比，以太坊在网络上运行的实现更加多样化，这通常被认为是一件好事。 事实上，它已被证明是防御网络攻击的绝佳方法，因为利用特定客户端的实施策略只会在开发人员修补漏洞时惹恼开发人员，而其他客户端则保持网络运行几乎不受影响。

=== 以太坊网络

((("clients, Ethereum","Ethereum-based networks and", id="ix_03clients-asciidoc1", range="startofrange")))((("networks (Ethereum)","clients and", id="ix_03clients-asciidoc2", range="startofrange")))存在着各种基于以太坊的网络，它们基本上符合《以太坊黄皮书》中定义的正式规范，但它们之间可能互操作，也可能不互操作。

在这些基于以太坊的网络中有以太坊，以太坊经典，Ella，Expanse，Ubiq，Musicoin等等。 虽然在协议级别大多兼容，但这些网络通常具有要求以太坊客户端软件的维护者进行小的更改以支持每个网络的功能或属性。 因此，并非所有版本的以太坊客户端软件都运行所有基于以太坊的区块链。

目前，有六种主要的由不同语言编写的以太坊协议的实现方案:

* Parity, Rust语言实现
* Geth, Go语言实现
* +cpp-ethereum+, Cpass:[++] 实现
* +pyethereum+, Python语言实现
* Mantis, Scala语言实现
* Harmony, Java语言实现

在本节中，我们将介绍两个最常见的客户端: Parity 和 Geth。 我们将展示如何使用每个客户机设置一个节点，并研究它们的一些命令行选项和应用程序编程接口(api)。

[[full_node_importance]]
==== 我需要运行一个全节点吗?

((("full node","Ethereum-based networks and", id="ix_03clients-asciidoc3", range="startofrange")))((("networks (Ethereum)","full nodes and", id="ix_03clients-asciidoc4", range="startofrange")))区块链的健康、弹性和抗审查依赖于它们具有许多独立操作和地理上分散的全节点。
每个全节点可以帮助其他新节点获得区块数据以引导其操作，并为运营者提供对所有交易和合约的权威和独立验证。

但是，运行一个完整的节点将导致硬件资源和带宽的开销。 一个完整的节点必须下载80&#x2013;100 GB 的数据(根据客户端配置，截至2018年9月) ，并将其存储在本地硬盘驱动器上。 随着新事务和块的增加，这种数据负担每天都在迅速增加。 我们将在 <<requirements>>. 中更详细地讨论这个主题。

在活动的主网络上运行一个完整的节点对于以太坊的开发不是必须的。 你几乎可以用一个测试网络节点(它将你连接到一个较小的公共测试区块链)、一个像 Ganache 这样的本地私有区块链，或者是一个像 Infura 这样的服务提供商提供的基于云的以太坊客户端可以做任何你需要做的事情。

你还可以选择运行远程客户端，它不存储区块链的本地副本或验证区块和交易。 这些客户端提供钱包的功能，可以创建和广播交易。 远程客户端可以用来连接到现有的网络，比如你自己的完整节点，一个公共区块链，一个公共或许可的(权威证明)测试网络，或者一个私有的本地区块链。 实际上，你可能会使用诸如 MetaMask、 Emerald钱包，pass:[<span class="keep-together">MyEtherWallet</span>] 或 MyCrypto 等远程客户端作为在所有不同节点选项之间切换的方便方式。

((("remote clients","wallet compared to")))((("wallets","remote clients compared to")))"远程客户端"和"钱包"这两个术语可以互换使用，尽管它们之间有一些区别。 通常，远程客户端除了钱包的交易功能外，还提供了一个 API (比如 web3.js API)。

((("light/lightweight client")))不要将以太坊中的远程钱包的概念与轻客户端(类似于比特币中的简化支付验证客户端)的概念混淆。 轻客户端验证块头和使用 Merkle 证明，以验证包含在区块链中的交易和确定其影响，在安全上和全节点是类似的。 相反，以太坊远程客户端不验证块标头或交易。 他们完全信任一个完整的客户端访问区块链，因此失去了重要的安全和匿名保证。 你可以通过使用自己运行的全节点客户端来缓解这些问题。

[[full_node_adv_disadv]]
==== 全节点优点和缺点

((("full node","advantages/disadvantages")))选择运行完整节点有助于你连接它的网络做操作，但也会产生一些轻微到中等的成本。 让我们看看一些优点和缺点。

*优点:*

* 支持基于以太坊网络的弹性和抗审查能力
* 权威性地验证所有交易
* 可以与公共区块链任何合作做交互， 无需中介
* 可以直接部署合约到公共区块链没有中介
* 可以离线查询(只读)区块链状态(帐户，合约等)
* 可以查询区块链，而不让第三方知道你在读的信息

*缺点:*

* 需要大量且不断增长的硬件和带宽资源
* 在第一次启动后，可能需要几天才能完全同步
* 必须维护，升级，并保持在线以保持同步(((range="endofrange", startref="ix_03clients-asciidoc4")))(((range="endofrange", startref="ix_03clients-asciidoc3")))

[[pub_test_adv_disadv]]
==== 公共测试网络的优势与劣势

((("networks (Ethereum)","public testnet advantages/disadvantages")))((("public testnets")))((("testnet","public")))无论你是否选择运行一个完整的节点，你都可能希望运行一个公共的测试网络节点。 让我们来看看使用公共测试网络的一些优点和缺点。

*优点:*

* 一个测试网络节点需要同步和存储的数据要少得多——根据网络的不同，约为10gb (截至2018年4月)。
* 一个测试网络节点可以在几个小时内完全同步。
* 部署合约或进行交易需要测试以太，这些以太没有价值，可以通过多个"水龙头"免费获得
* 测试网络是公共的区块链，有许多其他用户和合约，实时运行。

*缺点:*

* 你不能在testnet上使用“真正的”钱; 它使用测试以太币。 因此，你无法测试真实对手的安全性，因为没有任何利害关系。
* 公共区块链的某些方面无法在testnet上进行实际测试。例如，交易费虽然是发送交易所必需的，但并不是测试网上的考虑因素，因为gas是免费的。 此外，测试网络不会像公共主网有时那样经历网络拥塞。

[[localtest_adv_dis]]
==== 本地区块链模拟的优点和缺点

((("Ganache","advantages/disadvantages")))((("local blockchain simulation")))((("networks (Ethereum)","local blockchain simulation advantages/disadvantages")))((("private blockchain")))((("single-instance private blockchain")))对于许多测试需求来说，最好的选择是启动一个单实例私有区块链。
ganache(以前名为testrpc)是最流行的本地区块链模拟之一，你可以与其进行交互，而不需要任何其他参与者。
它具有公共测试网的许多优点和缺点，但也有一些不同之处。

*优点:*

* 没有同步，磁盘上几乎没有数据; 你可以自己挖掘第一个块
* 不需要获得测试以太; 你可以通过挖矿给自己”奖励“， 然后用这些以太做测试
* 没有其他用户，只有你
* 没有其他的合约，只有那些你启动后部署的合约

*缺点:*

* 没有其它用户意味着它的行为不同于一个公共区块链。 在交易空间或pass:[<span class="keep-together">交易</span>]顺序方面没有竞争。
* 除了你，没有其它矿工，意味着采矿是更可预测的，因此，你不能测试发生在公共区块链里的一些情景。
* 没有其他合约意味着你必须部署你想要测试的所有东西，包括依赖项和合约库。
* 你不能重新创建某些公共合约及其地址来测试某些场景(例如，DAO 契约)。(((range="endofrange", startref="ix_03clients-asciidoc2")))(((range="endofrange", startref="ix_03clients-asciidoc1")))


[[running_client]]
=== 运行一个以太坊客户端

((("clients, Ethereum","running", id="ix_03clients-asciidoc5", range="startofrange")))如果你有时间和资源，你应该尝试运行一个完整的节点，即使只是为了更多地了解该过程。 在本节中，我们将介绍如何下载、编译和运行 Ethereum 客户端 Parity 和 Geth。 这需要你熟悉在你的操作系统上使用命令行界面。 安装这些客户端是值得的，无论你选择将它们作为完整的节点运行，作为 testnet 节点，还是作为本地私有区块链的客户端。

[[requirements]]
==== 全节点的硬件要求

((("clients, Ethereum","full node hardware requirements")))((("full node","hardware requirements")))在我们开始之前，你应该确保有一台拥有足够资源的计算机来运行一个以太坊全节点。 你需要至少80gb 的磁盘空间来存储一个完整的以太坊副本。 如果你还想在 Ethereum测试网络上运行一个全节点，那么你至少需要额外的15Gb空间。 下载80gb 的区块链数据可能需要很长时间，所以建议你的互联网连接带宽足够。

同步以太坊区块链是非常密集的输入/输出(I/O)。 最好是有一个固态硬盘。 如果你有一个机械硬盘驱动器(硬盘驱动器) ，你将需要至少8Gb 的内存用作缓存。 否则，你可能会发现系统速度太慢，无法保持完全同步。

*最低要求:*

* 2核以上的CPU
* 至少80 GB 存储空间
* SSD存储+最少4GB内存，如果是HDD则8GB以上内存
* 8 MBit/sec 的互联网下载速度

这些是同步一个完整的以太坊区块链副本的最低需求。

在撰写本文时，Parity代码库的资源更轻，因此如果你使用有限的硬件运行，你可能会看到使用Parity相对有更好的结果。

如果你想在合理的时间内同步并存储我们在这本书中讨论的所有开发工具、库、客户端和区块链，你将需要一台更强大的计算机。

*推荐规格:*

* 4核以上的告诉CPU
* 16 GB以上的内存
* 至少500GB的告诉SSD存储
* 25MB/sec以上的网络下载速度

很难预测区块链的大小会以多快的速度增长，以及什么时候需要更多的磁盘空间，所以建议在你开始同步之前检查区块链的最新大小。

[NOTE]
====
这里列出的磁盘大小要求假设你将运行一个具有默认设置的节点，区块链上旧的状态数据被"剪裁"了。 如果你想运行一个完整的"归档"节点，即所有状态都保存在磁盘上，则可能需要超过1TB 的磁盘空间。
====

这些链接提供了最新的区块链大小的估计:

* https://bitinfocharts.com/ethereum/[Ethereum]

* https://bitinfocharts.com/ethereum%20classic/[Ethereum Classic]

[[sw_reqs]]
==== 构建和运行客户端(节点)的软件需求

((("clients, Ethereum","software requirements for building/running", id="ix_03clients-asciidoc6", range="startofrange")))本节介绍Parity和Geth客户端软件。 它假设你使用的是类Unix的命令行环境。 这些示例显示了Ubuntu GNU / Linux操作系统上运行bash shell（命令行执行环境）出现的命令和输出。

通常每个块环链都会有自己的 Geth 版本，而 Parity 则是一个客户端同时支持多个基于以太坊网络的区块链(以太坊，以太坊经典，pass:[<span class="keep-together">Ellaism</span>], Expanse, Musicoin) 。

[TIP]
=====
((("$ symbol")))((("command-line interface")))((("shell commands")))((("terminal applications")))在本章的许多例子中，我们将使用操作系统的命令行界面文件夹(也称为"shell") ，通过"终端"应用程序访问。 Shell 将显示一个提示符; 你键入一个命令，shell 将用一些文本和下一个命令的新提示符进行响应。 提示符在你的系统上可能看起来不同，但是在下面的示例中，它由一个 $符号表示。 在示例中，当在 $符号后面看到文本时，不要键入 $符号，而是直接在其后面键入命令(以粗体显示) ，然后按 Enter 以执行命令。 在示例中，每个命令下面的行是操作系统对该命令的响应。 当你看到下一个 $前缀时，你将知道这是一个新命令，并且应该重复这个过程。
=====

在我们开始之前，您可能需要安装一些软件。 如果您从未在目前使用的计算机上进行过任何软件开发，那么您可能需要安装一些基本的工具。 对于下面的示例，您需要安装 +git+ (源代码管理系统)、 +golang+ (Go 编程语言和标准库)和 Rust (系统编程语言)。

((("git")))Git的安装说明见这里： https://git-scm.com[].

((("Go", seealso="Geth (Go-Ethereum)")))Go的安装说明见这里 https://golang.org[].

[NOTE]
=====
((("Geth (Go-Ethereum)")))Geth要求各不相同，但如果你坚持使用Go 1.10或更高版本，你应该能够编译你想要的任何版本的Geth。 当然，您应该始终参考您选择的Geth风格的文档。

系统默认安装的 +golang+ 版本可能低于1.10， 如果是这样的话请删除从这里下载最新版本 https://golang.org/[]
=====

((("Rust")))Rust可以按照这个参考文档安装 https://www.rustup.rs/[].

[NOTE]
=====
Parity客户端需要Rust版本在1.27以上
=====

((("Parity","libraries for")))Parity客户端还需要一些依赖的软件库， 比如OpenSSL 和 +libudev+ 。 在Ubuntu或者Debian系统里安装请使用如下pass:[<span class="keep-together">命令</span>] :

++++
<pre data-type="programlisting">
$ <strong>sudo apt-get install openssl libssl-dev libudev-dev cmake</strong>
</pre>
++++

对于其他操作系统，请使用操作系统的包管理器或按照 Wiki 说明 https://github.com/paritytech/parity/wiki/Setup[Wiki instructions] 安装所需的库。

现在你已经安装了 git+, +golang+, Rust, 和必要的库，让我们开始工作吧！

[[parity]]
==== Parity

((("clients, Ethereum","Parity and")))((("Parity","basics")))Rust是一个全节点以太坊客户端和 DApp 浏览器的实现。 它是用 Rust (一种系统编程语言)"从头开始"编写的，目的是构建一个模块化、安全和可扩展的以太坊客户端。 是由一家英国公司 Parity Tech 开发的，在 GPLv3自由软件许可下发布。

[NOTE]
=====
披露：本书的作者之一，Gavin Wood博士，是Parity Tech的创始人，Parity 客户端的大部分代码都是他写的。 Parity占安装的以太坊客户群的25％左右。
=====

要安装 Parity，你可以使用 Rust 包管理器 cargo 或者从 GitHub 下载源代码。 软件包管理器也可以下载源代码，因此这两个选项之间没有太大差别。 在下一节中，我们将向你展示如何自己下载和编译Rust。

[[install_parity]]
===== 安装 Parity

((("Parity","installing")))https://wiki.parity.io/Setup[Parity Wiki] 提供了在不同环境和容器中构建 Parity 的说明。 我们将向你展示如何从源代码构建Rust。 假设你已经使用 rustup 安装了 Rust (see <<sw_reqs>>)。

首先， 从GitHub获得源码:

++++
<pre data-type="programlisting">
$ <strong>git clone https://github.com/paritytech/parity</strong>
</pre>
++++

切换到 _parity_ 目录， 使用 +cargo+ 构建可执行文件：

++++
<pre data-type="programlisting">
$ <strong>cd parity</strong>
$ <strong>cargo install</strong>
</pre>
++++

如果一切正常， 你可能会看到下面这样:

++++
<pre data-type="programlisting">
$ <strong>cargo install</strong>
    Updating git repository `https://github.com/paritytech/js-precompiled.git`
 Downloading log v0.3.7
 Downloading isatty v0.1.1
 Downloading regex v0.2.1

 [...]

Compiling parity-ipfs-api v1.7.0
Compiling parity-rpc v1.7.0
Compiling parity-rpc-client v1.4.0
Compiling rpc-cli v1.4.0 (file:///home/aantonop/Dev/parity/rpc_cli)
Finished dev [unoptimized + debuginfo] target(s) in 479.12 secs
$
</pre>
++++

尝试运行 +parity+ 看看是否已经安装好， 带上 +--version+ 选项

++++
<pre data-type="programlisting">
$ <strong>parity --version</strong>
Parity
  version Parity/v1.7.0-unstable-02edc95-20170623/x86_64-linux-gnu/rustc1.18.0
Copyright 2015, 2016, 2017 Parity Technologies (UK) Ltd
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

By Wood/Paronyan/Kotewicz/Drwięga/Volf
   Habermeier/Czaban/Greeff/Gotchac/Redmann
$
</pre>
++++

太好了！ 现在已经安装了Parity，你可以同步区块链并开始使用一些基本的命令行选项。

[[go_ethereum_geth]]
==== Go-Ethereum (Geth)

((("clients, Ethereum","Geth and", id="ix_03clients-asciidoc7", range="startofrange")))((("Geth (Go-Ethereum)","basics", id="ix_03clients-asciidoc8", range="startofrange")))Geth 是由 以太坊基金会积极开发的Go语言实现，因此被认为是以太坊客户端的"官方"实现。 通常，每一个基于以太坊的区块链都有自己的 Geth 实现。 如果你正在运行 Geth，那么你需要确保使用以下版本库链接之一获取正确的区块链版本:


* https://github.com/ethereum/go-ethereum[Ethereum] (or https://geth.ethereum.org/)

* https://github.com/ethereumproject/go-ethereum[Ethereum Classic]

* https://github.com/ellaism/go-ellaism[Ellaism]

* https://github.com/expanse-org/go-expanse[Expanse]

* https://github.com/Musicoin/go-musicoin[Musicoin]

* https://github.com/ubiq/go-ubiq[Ubiq]

[NOTE]
=====

你也可以跳过这些指南，为所选择的平台安装预编译的二进制文件。 预编译的版本更容易安装，可以在版本库的"releases"部分中找到。 当然，你可自行下载及编译有关软件，以了解更多信息。
=====

[[cloning_repo]]
===== 克隆版本库

((("Geth (Go-Ethereum)","cloning Git repo for")))第一步是克隆git的版本库， 获得一份源码副本。

为获得你选择的版本库的一份本地克隆， 在你的home目录或开发环境的任何目录下， 使用 +git+ 命令：

++++
<pre data-type="programlisting">
$ <strong>git clone &lt;Repository Link&gt;</strong>
</pre>
++++

You should see a progress report as the repository is copied to your local system:
当笨笨库被复制到你的本地系统时，你应该看到一个进度条显示:

[[cloning_status]]
----
Cloning into 'go-ethereum'...
remote: Counting objects: 62587, done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 62587 (delta 10), reused 13 (delta 4), pack-reused 62557
Receiving objects: 100% (62587/62587), 84.51 MiB | 1.40 MiB/s, done.
Resolving deltas: 100% (41554/41554), done.
Checking connectivity... done.
----

太好了！ 现在你已经有了 Geth 的本地副本，可以为你的平台编译一个可执行文件。

[[build_geth_src]]
===== 从源码构建Geth

((("Geth (Go-Ethereum)","building from source code")))要构建Geth， 切换目录到下载的源码路径， 执行 +make+ 命令:

++++
<pre data-type="programlisting">
$ <strong>cd go-ethereum</strong>
$ <strong>make geth</strong>
</pre>
++++

如果一切顺利，你将看到 Go 编译构建每个组件，直到它生成 geth 可执行文件:

[[making_geth_status]]
----
build/env.sh go run build/ci.go install ./cmd/geth
>>> /usr/local/go/bin/go install -ldflags -X main.gitCommit=58a1e13e6dd7f52a1d...
github.com/ethereum/go-ethereum/common/hexutil
github.com/ethereum/go-ethereum/common/math
github.com/ethereum/go-ethereum/crypto/sha3
github.com/ethereum/go-ethereum/rlp
github.com/ethereum/go-ethereum/crypto/secp256k1
github.com/ethereum/go-ethereum/common
[...]
github.com/ethereum/go-ethereum/cmd/utils
github.com/ethereum/go-ethereum/cmd/geth
Done building.
Run "build/bin/geth" to launch geth.
$
----

让我们确保 geth 能正常工作，而不是真正开始运行它:

++++
<pre data-type="programlisting">
$ <strong>./build/bin/geth version</strong>

Geth
Version: 1.6.6-unstable
Git Commit: 58a1e13e6dd7f52a1d5e67bee47d23fd6cfdee5c
Architecture: amd64
Protocol Versions: [63 62]
Network Id: 1
Go Version: go1.8.3
Operating System: linux
[...]
</pre>
++++

您你的 +geth version+ 命令可能显示稍微不同的信息，但你应该看到一个版本报告，与这里看到的非常相似。

暂不要运行 geth，因为它将以"缓慢的方式"开始同步区块链，这将需要太长的时间(数周)。(((range="endofrange", startref="ix_03clients-asciidoc8")))(((range="endofrange", startref="ix_03clients-asciidoc7"))) 接下来的章节解释以太坊区块链初始化同步的挑战(((range="endofrange", startref="ix_03clients-asciidoc6"))).(((range="endofrange", startref="ix_03clients-asciidoc5")))


[[first_sync]]
=== 基于以太坊区块链的第一次同步

((("blockchain","first synchronization of", id="ix_03clients-asciidoc9", range="startofrange")))((("clients, Ethereum","first synchronization of Ethereum-based blockchains", id="ix_03clients-asciidoc10", range="startofrange")))((("first synchronization","of Ethereum-based blockchains", id="ix_03clients-asciidoc11", range="startofrange")))通常，当同步以太坊区块链时，你的客户端会下载并验证每一个区块和每个交易，从最开始&#x2014;也就是创世区块开始。

虽然完全同步区块链这种方式是可能的，但同步将需要很长的时间，并有很高的资源需求(需要更多的内存，如果你没有快速存储依然需要非常长的时间)。

许多基于以太坊的区块链是2016年底拒绝服务攻击的受害者。 受影响的区块链在进行完全同步时会趋向于缓慢同步。

例如，在以太坊上，一个新的客户端在到达区块高度2,283,397之前将取得迅速的进展。 这个区域在2016年9月18日被挖矿，标志着 DoS 攻击的开始。 从这个块到区块高度2,700,031(2016年11月26日) ，交易的验证变得极其缓慢，内存密集，i / o 密集。 这将导致每个块的验证时间超过1分钟。 Ethereum 使用硬分叉实现了一系列的升级，以解决在 DoS 攻击中被利用的底层漏洞。 这些升级也清除了区块链通过删除约2000万空帐户创建的垃圾交易。

如果你正在以完整验证方式同步，你的客户端将放慢速度，可能需要几天，甚至更长的时间来验证受 DoS 攻击影响的区块。

((("fast synchronization")))幸运的是，大多数以太坊客户端都有一个选项，可以执行"快速"同步，跳过交易的全部验证，直到同步到区块链的末端，然后恢复全部验证。

对于 Geth来说，启用快速同步的选项通常称为 +--fast+。 你可能需要参考你所选择的以太坊链的具体说明。

Parity在默认情况下就实现快速同步

[NOTE]
=====

只有从一个空的区块数据库开始时，Geth 才能操作快速同步。 如果你没有启用快速模式就开始同步，Geth是不能切换的。 从一开始就删除区块链数据目录并开始快速同步比继续完整验证同步要快。 在删除区块链数据时小心不要删除任何钱包！
=====

==== 运行Geth或者Parity

((("first synchronization","Geth or Parity for")))((("Geth (Go-Ethereum)","for first synchronization")))((("Parity","for first synchronization")))现在你已经理解了"第一次同步"的挑战，你已经准备好启动一个以太坊客户端并同步区块链。 对于 Geth 和 Parity，可以使用 +--help+ 选项查看所有配置参数。 如上一节所述，对于Geth来说除了使用 +--fast+ 之外，默认设置通常是合理的，适合大多数用途。 选择如何配置任何可选参数以满足你的需要，然后启动 Geth 或 Parity 来同步区块链。 然后等待..。

[TIP]
====
同步以太坊区块链需要的时间看情况， 有大量内存的快速系统上需要半天， 在一个较慢的系统上可能需要数天。
====

[[json_rpc]]
==== JSON-RPC接口

((("clients, Ethereum","and JSON-RPC API", id="ix_03clients-asciidoc12", range="startofrange")))((("first synchronization","and JSON-RPC API", id="ix_03clients-asciidoc13", range="startofrange")))((("JSON-RPC API", id="ix_03clients-asciidoc14", range="startofrange")))以太坊客户端提供应用程序编程接口和一组远程过程调用（RPC）命令，这些命令被编码为JavaScript对象表示（JSON）。 你将看到这称为JSON-RPC API。 本质上，JSON-RPC API是一个接口，允许我们以以太坊客户端作为入口编写程序进入以太坊网络和区块链。

通常RPC 接口是以端口8545上的 HTTP 服务提供的。 出于安全原因，默认情况下，它只能接受来自本地主机(你自己计算机的 IP 地址，即127.0.0.1)的连接。

要访问JSON-RPC API，你可以使用专用库（使用你选择的编程语言编写），该库提供与每个可用RPC命令相对应的“存根”函数调用，或者你可以手动构造HTTP请求并发送/接收JSON编码请求。 你甚至可以使用通用命令行HTTP客户端（如curl）来调用RPC接口。 我们试试吧。 首先，确保已配置并运行Geth，然后切换到新的终端窗口（例如，在现有终端窗口中使用Ctrl-Shift-N或Ctrl-Shift-T），如下所示：

++++
<pre data-type="programlisting">
$ <strong>curl -X POST -H "Content-Type: application/json" --data \
  '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
  http://localhost:8545</strong>

{"jsonrpc":"2.0","id":1,
"result":"Geth/v1.8.0-unstable-02aeb3d7/linux-amd64/go1.8.3"}
</pre>
++++

在此示例中，我们使用curl建立到地址 _http://localhost:8545_ 的HTTP连接。 我们已经在运行geth，它在端口8545上提供JSON-RPC API作为HTTP服务。我们指示curl使用HTTP POST命令并将内容标识为类型 +application/json+ 。 最后，我们传递一个JSON编码的请求作为HTTP请求的数据组件。 我们的大多数命令行只是设置curl以正确建立HTTP连接。 有趣的部分是我们发出的实际JSON-RPC命令：

[[JSON_RPC_command]]
----
{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}
----

JSON-RPC 请求是根据 https://www.jsonrpc.org/specification[JSON-RPC 2.0 规范] 格式化的。 每个请求包含四个元素:

++jsonrpc++:: JSON-RPC协议的版本. 它必须是 ++"2.0"++.

++method++:: 被调用的方法名.

++params++:: 一个结构化值，用于保存在调用方法期间要使用的参数值。 该成员可以省略。

++id++:: 客户端建立的标识符，如果包含，必须包含 +String+, +Number+ 或 +NULL+ 值。 服务器必须在响应对象中回复相同的值。 该成员用于关联两个对象之间的上下文。

[TIP]
====
((("batching")))id参数主要用于在单个JSON-RPC调用中发出多个请求时，这种做法称为批处理。 批处理用于避免每个请求的新HTTP和TCP连接的开销。 例如，在以太坊上下文中，如果我们想通过一个HTTP连接检索数千个事务，我们将使用批处理。 批处理时，为每个请求设置不同的ID，然后将其与来自JSON-RPC服务器的每个响应中的id匹配。 实现此目的的最简单方法是维护计数器并增加每个请求的值。
====


我们接收到的响应是:

----
{"jsonrpc":"2.0","id":1,
"result":"Geth/v1.8.0-unstable-02aeb3d7/linux-amd64/go1.8.3"}
----

这告诉我们 JSON-RPC API 是由 Geth 客户端版本1.8.0提供的。

让我们尝试一些更有趣的东西。 在下一个例子中，我们向 JSON-RPC API 询问当前gas价格（单位是WEI）:

++++
<pre data-type="programlisting">
$ <strong>curl -X POST -H "Content-Type: application/json" --data \
  '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":4213}' \
  http://localhost:8545</strong>

{"jsonrpc":"2.0","id":4213,"result":"0x430e23400"}
</pre>
++++

+0x430e23400+ 的回复告诉我们，目前的gas价格是18 gwei (十亿wei)。 如果你和我们一样不使用十六进制思考，那么可以在命令行中使用 bash-fu 将其转换为十进制:

++++
<pre data-type="programlisting">
$ <strong>echo $((0x430e23400))</strong>

18000000000
</pre>
++++

完整的 JSON-RPC API 可以在 https://github.com/ethereum/wiki/wiki/JSON-RPC[Ethereum wiki]上查看。

[[parity_compatibility_mode]]
===== Parity的Geth兼容模式

Parity有一个特殊的"Geth 兼容模式"，其中它提供了一个与 Geth 提供的相同的 JSON-RPC API。 要在这种模式下运行Parity，请使用 +--geth+ 开关(((range="endofrange", startref="ix_03clients-asciidoc14")))(((range="endofrange", startref="ix_03clients-asciidoc13")))(((range="endofrange", startref="ix_03clients-asciidoc12"))):(((range="endofrange", startref="ix_03clients-asciidoc11")))(((range="endofrange", startref="ix_03clients-asciidoc10")))(((range="endofrange", startref="ix_03clients-asciidoc9")))：

++++
<pre data-type="programlisting">
$ <strong>parity --geth</strong>
</pre>
++++

[[lw_eth_clients]]
=== 远程以太坊客户端

((("clients, Ethereum","remote", id="ix_03clients-asciidoc15", range="startofrange")))((("remote clients", id="ix_03clients-asciidoc16", range="startofrange")))远程客户端提供完整客户端功能的子集。 他们不存储完整的以太坊区块链，所以他们安装更快，需要更少的数据存储。

[role="pagebreak-before"]
这些客户端通常提供以下一种或多种能力:

* 在钱包中管理私钥和以太坊地址。
* 创建、签名和广播交易。
* 使用数据负载与智能合约交互。
* 在DAPP里浏览和交互
* 提供到外部服务的链接，比如区块链浏览器
* 转换以太单位和检索外部来源的汇率。
* 将 web3实例作为 JavaScript 对象注入到 web 浏览器中。
* 使用另一个客户端提供/注入到浏览器中的 web3实例。
* 访问本地或远程以太坊节点上的 RPC 服务。

某些远程客户端（例如移动（智能手机）钱包）仅提供基本钱包功能。 其他远程客户端是完整的DApp浏览器。 远程客户端通常提供全节点以太坊客户端的一些功能，而无需通过连接到其他地方运行的完整节点来同步以太坊区块链的本地副本，例如，您在本地机器上或Web服务器上，或通过 他们服务器上的第三方。

让我们来看看一些最流行的远程客户端及其提供的功能。

[[mobile_wallets]]
==== 移动（智能手机）钱包

((("mobile (smartphone) wallets")))((("remote clients","mobile wallets")))((("wallets","mobile")))所有的移动钱包都是远程客户端，因为智能手机没有足够的资源运行一个完整的以太坊客户端。 轻客户端正在开发中，一般不用于 以太坊。  对于Parity，轻客户端标记为"experimental"，可以通过运行 +parity+ 和 +--light+ 选项来使用。

流行的移动钱包包括以下内容（我们仅将这些列为示例;这不是对这些钱包的安全性或功能的认可或指示）：

https://jaxx.io[Jaxx]:: ((("Jaxx","mobile version")))((("wallets","Jaxx")))基于 BIP-39记忆种子的多货币移动钱包，支持比特币、 Litecoin、 以太坊、 Ethereum Classic、 ZCash、各种 ERC20代币和许多其他货币。 Jaxx 可以在 Android 和 iOS 上使用，作为一个浏览器插件钱包，也可以作为一个支持各种操作系统的桌面钱包。

https://status.im[Status]:: ((("Status (mobile wallet)")))一个移动钱包和 DApp 浏览器，支持各种Token和流行的 DApps。 适用于 iOS 和 Android。

https://trustwalletapp.com/[Trust Wallet]:: ((("Trust Wallet")))((("wallets","Trust")))支持以太坊和以太坊经典的移动钱包，支持ERC20和ERC223的Token。 Trust Wallet适用于iOS和Android。

https://www.cipherbrowser.com[Cipher Browser]::  ((("Cipher Browser")))一个全功能的支持以太坊的移动 DApp 浏览器和钱包，允许与以太坊应用程序和令牌集成。 适用于 iOS 和 Android。

[[browser_wallets]]
==== 浏览器钱包

((("browser wallets")))((("remote clients","browser wallets")))((("wallets","browser wallets")))各种各样的钱包和 DApp 浏览器都可以作为插件或者网络浏览器的扩展，比如 Chrome 和 Firefox。 这些是运行在你的浏览器中的远程客户端。

一些比较流行的浏览器钱包有MetaMask, Jaxx, MyEtherWallet/MyCrypto和Mist

[[MetaMask]]
===== MetaMask

https://metamask.io/[MetaMask], ((("MetaMask","as browser wallet")))在 <<intro_chapter>>介绍过，  它是一个通用的基于浏览器的钱包、 RPC客户端和基础的合约浏览器。 它可以在 Chrome，Firefox，Opera 和 Brave 浏览器上使用。

与其他浏览器钱包不同，MetaMask 在浏览器的 JavaScript 上下文中注入了一个 web3实例，作为一个 RPC 客户端连接到各种以太坊区块链(主网，Ropsten测试网络，Kovan测试网络，本地RPC节点 等)。 能够注入 web3实例并充当外部 RPC 服务的网关，这使得 MetaMask 成为开发人员和用户都喜欢的非常强大的工具。 例如，它可以与 MyEtherWallet 或 MyCrypto 相结合，充当这些工具的 web3提供者和 RPC 网关。

[[Jaxx]]
===== Jaxx

https://jaxx.io[Jaxx], ((("Jaxx","desktop version")))((("wallets","Jaxx")))which was introduced as a mobile wallet in the previous section, is also available as a Chrome and Firefox extension and as a desktop wallet.

https://jaxx.io[Jaxx], ((("Jaxx","desktop version")))((("wallets","Jaxx")))，上一节中介绍的移动钱包，也可以作为 Chrome 和 Firefox 扩展以及桌面钱包使用。

[[MEW]]
===== MyEtherWallet (MEW)

https://www.myetherwallet.com/[MyEtherWallet] ((("MyEtherWallet (MEW)")))((("wallets","MyEtherWallet")))是一个基于浏览器的JavaScript远程客户端， 提供如下功能：

* 一个运行 JavaScript 的软件钱包
* 通往流行硬件钱包的桥梁，如 Trezor 和 Ledger
* 一个可以连接到另一个客户端注入的 web3实例的 web3接口(例如，MetaMask)
* 一个可以连接到以太坊完整客户端的 RPC 客户端
* 一个基本的接口，可以与智能合约交互，给定合同的地址和应用二进制接口(ABI)

Myetherwallet 是非常有用的测试和作为一个硬件钱包的接口。 它不应该作为主要的软件钱包使用，因为它通过浏览器环境暴露在威胁之下，而不是一个安全的密钥存储系统。

[WARNING]
====
访问 MyEtherWallet 和其他基于浏览器的 JavaScript 钱包时必须非常小心，因为它们经常是网络钓鱼的目标。 使用书签而不是搜索引擎或链接来访问正确的网址。
====

[[MyCrypto]]
===== MyCrypto

((("MyCrypto (wallet)")))((("wallets","MyCrypto")))Just prior to the publication of this book, the ((("MyEtherWallet (MEW)")))((("wallets","MyEtherWallet")))就在本书出版之前，MyEtherWallet 项目在两个独立开发团队的指导下，分裂成两个相互竞争的实现: 在开源开发中称为"fork"。 这两个项目分别称为 MyEtherWallet (最初的品牌)和https://mycrypto.com/[MyCrypto]。 分拆 MyCrypto 时，MyCrypto 提供了与 MyEtherWallet 相同的功能，但是由于两个开发团队采用了不同的目标和优先级，这两个项目可能会有所不同。

[[Mist]]
===== Mist

https://github.com/ethereum/mist[Mist] ((("Mist (browser-based wallet)")))((("wallets","Mist")))是第一个支持 Ethereum 的浏览器，由 Ethereum 基金会开发。 它包含一个基于浏览器的钱包，这是 ERC20令牌标准的第一个实现(Fabian Vogelsteller，ERC20的作者，也是 Mist 的主要开发者)。 Mist 也是第一个介绍 camelCase 校验的钱包(EIP-55)。 Mist 运行一个完整的节点，并提供一个完整的 DApp 浏览器，支持基于 swarm 的存储和 ENS 地址。(((range="endofrange", startref="ix_03clients-asciidoc16")))(((range="endofrange", startref="ix_03clients-asciidoc15")))



=== 小结

在这一章中，我们探索了以太坊客户端。 你下载，安装和同步一个客户端，成为一个以太坊网络的参与者， 通过将区块链数据复制到你的本地计算机上， 你为以太坊网络系统的健康和稳定做出了贡献。(((range="endofrange", startref="ix_03clients-asciidoc0")))


