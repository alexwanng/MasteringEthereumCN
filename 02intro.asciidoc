[[intro_chapter]]
== 以太坊基础

((("Ethereum (generally)","basics", id="ix_02intro-asciidoc0", range="startofrange")))在本章中，我们将开始探索以太坊，学习如何使用钱包，如何创建交易，以及如何运行基本的智能合约。

[[ether_units]]
=== 以太坊货币单位

((("currency units")))((("Ethereum (generally)","currency units")))以太坊的货币单位称为 _ether_，也称为“ETH”或符号&#926;（来自希腊字母“Xi”，看起来像一个程式化的大写字母E）或者，少数情况下使用&#9830;:例如，1个以太(ether)，或1个ETH ，&#926;1, 或 &#9830;1.。

[TIP]
====
Use Unicode character +U+039E+ for &#926; and +U+2666+ for &#9830;.
====

以太网被细分为更小的单位，最小的单位，名为 _wei_。 一个以太是 10^18^ wei(1 * 10^18^ 或者1,000,000,000,000,000,000).你可能会听到人们也提到货币“以太坊”，但这是一个常见的初学者的错误。 以太坊是系统，以太是货币。

以太的值总是在以太坊内部表示为以wei表示的无符号整数值。 当你处理1以太时，交易将编码1000000000000000000 wei作为值。

以太的各种面值既有一个使用国际单位制（_SI_）的科学名称，也有一个口语名称，向许多计算和密码学的伟大思想致敬。

<<ether_denominations>> 显示了不同的单位, 他们的口语（普通）名称及其SI名称。 为了与值的内部表示保持一致，该表显示了wei中的所有面额（第一行），在第7行中以太显示为10 ^ 18 ^ wei。

[[ether_denominations]]
.以太的面值和单位名称
[options="header"]
|===
| 值 (wei) | 指数 | 一般名称 | SI 名称
| 1 | 1 | wei | Wei
| 1,000 | 10^3^ | Babbage | Kilowei or femtoether
| 1,000,000 | 10^6^ | Lovelace | Megawei or picoether
| 1,000,000,000 | 10^9^ | Shannon | Gigawei or nanoether
| 1,000,000,000,000 | 10^12^ | Szabo | Microether or micro
| 1,000,000,000,000,000 | 10^15^ | Finney | Milliether or milli
| _1,000,000,000,000,000,000_ | _10^18^_ | _Ether_ | _Ether_
| 1,000,000,000,000,000,000,000 | 10^21^ | Grand | Kiloether
| 1,000,000,000,000,000,000,000,000 | 10^24^ | | Megaether
|===

[[choosing_eth_wallet]]
=== 选择一个以太坊钱包

((("Ethereum (generally)","wallet choices")))((("wallets","choosing")))((("wallets","defined")))“钱包”这个词已经意味着很多东西，尽管它们都是相关的，并且在日常的基础上归结为几乎相同的东西。 我们将使用术语“钱包”来表示可帮助你管理以太坊帐户的软件应用程序。 简而言之，以太坊钱包是你通往以太坊系统的入口。 它包含你的密钥，可以代表你创建和广播交易。 选择以太坊钱包可能很困难，因为有许多不同的选项，具有不同的功能和设计。 有些更适合初学者，有些更适合专家。 以太坊平台本身仍在不断改进，“最佳”钱包通常是适应平台升级带来的变化的钱包。

但别担心！ 如果你选择一个钱包并且不喜欢它的工作方式&#x2014;或者如果你最初喜欢它，但后来想尝试别的东西&#x2014;你可以很容易地改变钱包。 你所要做的就是进行一项交易，将你的资金从旧钱包发送到新钱包，或者导出你的私钥并将其导入新的私钥。

我们选择了三种不同类型的钱包作为整本书的例子：手机钱包，桌面钱包和基于网络的钱包。 我们选择了这三个钱包因为它们代表了广泛的复杂性和功能。 但是，选择这些钱包并不是对其质量或安全性的认可。 它们只是演示和测试的良好起点。

((("private keys","wallets and")))请记住，要使钱包应用程序正常工作，它必须能够访问你的私钥，因此你只需从你信任的来源下载和使用钱包应用程序至关重要。 幸运的是，一般来说，钱包应用程序越流行，它就越可靠。 尽管如此，最好避免“将所有鸡蛋放在一个篮子里”， 你的以太坊帐户最好分散在多个钱包中。

以下是一些好的入门钱包：

MetaMask:: ((("MetaMask")))MetaMask是一个浏览器扩展钱包，可在你的浏览器（Chrome，Firefox，Opera或Brave Browser）中运行。 它易于使用且便于测试，因为它能够连接到各种以太坊节点和测试区块链。 MetaMask是一个基于网络的钱包。

Jaxx:: ((("Jaxx")))((("wallets","Jaxx")))Jaxx是一个多平台和支持多货币钱包，可在各种操作系统上运行，包括Android，iOS，Windows，macOS和Linux。 对于新用户而言，它通常是一个不错的选择，因为它的设计简单易用。 Jaxx既有移动钱包也有桌面钱包，具体取决于您安装它的位置。

MyEtherWallet (MEW):: ((("Ethereum Classic (ETC)","Emerald Wallet and")))((("MyEtherWallet (MEW)")))((("wallets","Emerald Wallet")))((("wallets","MyEtherWallet")))MyEtherWallet是一个基于网络的钱包，可以在任何浏览器中运行。 它具有我们将在许多示例中探索的多种复杂功能。

Emerald 钱包:: ((("Emerald Wallet")))Emerald钱包旨在与以太坊经典区块链配合使用，但与其他基于以太坊的区块链兼容。 它是一个开源桌面应用程序，可在Windows，macOS和Linux下运行。 Emerald钱包可以运行完整节点或连接到公共远程节点，以“轻”模式工作。 它还有一个配套工具，可以从命令行执行所有操作。

我们首先在桌面上安装MetaMask &#x2014;但首先，我们将简要讨论控制和管理密钥。

[[control_responsibility]]
=== 控制与责任

((("Ethereum (generally)","control and responsibility", id="ix_02intro-asciidoc1", range="startofrange")))像以太坊这样的开放式区块链很重要，因为它们作为 _去中心化_ 系统运行。 这意味着很多事情，但一个关键的方面是，以太坊的每个用户都可以&#x2014;并且应该&#x2014;控制他们自己的私钥，这些是控制对资金和智能合约的访问的东西。 我们有时将访问资金和智能合约的组合称为“账户”或“钱包”。这些术语的功能可能会非常复杂，因此我们稍后会详细介绍。然而，作为一个基本原则，简单来说一个私钥等于一个“帐户”。 有些用户选择通过使用第三方保管人（例如在线交易所）放弃对其私钥的控制。在本书中，我们将教你如何控制和管理自己的私钥。

控制带来了很大的责任。 如果你丢失了私钥，则会失去对你的资金和合同的访问权限。 没有人可以帮助你重新获得访问权限&#x2014;你的资金将被永久锁定。 以下是一些帮助你管理此责任的提示：

* 不要即兴发挥安全措施。使用久经考验的标准方法。

* 帐户越重要(例如，所控制的资金价值越高，或可访问的智能合约越重要)，就应该采取更高的安全措施。

* 最高的安全性是从一个空气间隙设备获得的，但是这个级别并不是每个帐户都需要的。

* 永远不要以普通形式存储私钥，尤其是数字形式。 幸运的是，今天的大多数用户界面甚至不会让你看到原始的私钥。

* ((("private keys","wallets and")))私钥可以作为数字“密钥库”文件以加密的形式存储。加密后，他们需要密码才能解锁。当系统提示你选择密码时，请将其设置为强密码(即长密码和随机密码)，备份密码，不要共享密码。如果你没有密码管理器，写下来，并存储在一个安全和秘密的地方。要访问你的帐户，你需要密钥库文件和密码。

* 请勿在数字文档、数字照片、屏幕截图、在线驱动器、加密PDF等中存储任何密码。再说一遍，不要即兴发挥安全措施。使用密码管理器或笔和纸。

* 当系统提示你将密钥备份为助记词序列时，请使用笔和纸进行物理备份。 不要把这项任务“留待以后”; 你会忘记的。 这些备份可用于重建你的私钥，以防你丢失系统中保存的所有数据，或者忘记或丢失密码。 但是，它们也可以被攻击者用来获取你的私钥，因此不要以数字方式存储它们，并将物理副本安全地存放在锁定的抽屉或保险箱中。

* 在做任何大额转账（特别是新地址）之前，首先进行一次小型测试交易（例如，价值低于1美元）并等待确认收货。

* 创建新帐户时，首先只向新地址发送一小笔测试交易。收到测试交易后，请尝试从新帐户再次发回。帐户创建可能出错的原因有很多，如果出现错误，最好是用较小的损失来找出原因。如果测试成功，一切都很好。

* 公共区块链浏览器是独立查看事务是否已被网络接受的简单方法。 然而，这种便利对你的隐私有负面影响，因为你把你的地址泄露给区块浏览器，他们可以跟踪你。

* 请勿将钱寄往本书所示的任何地址。私人钥匙列在书上，有人会立即拿走那笔钱。

现在我们已经介绍了一些密钥管理和安全性的基本最佳实践，让我们开始使用MetaMask！(((range="endofrange", startref="ix_02intro-asciidoc1")))

[[installing_MetaMask]]
=== MetaMask入门

((("Ethereum (generally)","MetaMask basics", id="ix_02intro-asciidoc2", range="startofrange")))((("MetaMask","basics", id="ix_02intro-asciidoc3", range="startofrange")))打开Google Chrome浏览器并导航到 https://chrome.google.com/webstore/category/extensions[].

搜索"MetaMask"，然后点击狐狸的标志。 你应该会看到类似结果的东西 <<metamask_download>>.

[[metamask_download]]
.MetaMask Chrome的插件详细页面
image::images/metamask_download.png["MetaMask Detail Page"]

验证你是否正在下载真正的MetaMask扩展程序非常重要，因为有时候人们可以通过谷歌的过滤器隐藏恶意扩展。 确认下载的是真正的扩展程序：

* 在地址栏里显示的id是： +nkbihfbeogaeaoehlefnkodbefgpgknn+
* 由 https://metamask.io 提供
* 有超过1,400条评论
* 超过1,000,000名用户

确认你正在查看正确的扩展程序后，请点击“添加到Chrome”进行安装。

[[using_MetaMask]]
==== Creating a Wallet

((("MetaMask","wallet setup with", id="ix_02intro-asciidoc4", range="startofrange")))一旦安装了 MetaMask，你应该会在浏览器的工具栏中看到一个新的图标(狐狸的头)。 点击它开始。 你将被要求接受条款和条件，然后通过输入密码创建新的以太坊钱包 (参考 <<metamask_password>>).

[[metamask_password]]
.MetaMask Chrome浏览器扩展的密码页面
image::images/metamask_password.png["MetaMask Password Page"]

[TIP]
====
密码控制了 MetaMask 的访问权限，因此任何访问你浏览器的人都不能使用它。
====

((("mnemonic code words","MetaMask and", id="ix_02intro-asciidoc5", range="startofrange")))一旦你设置了密码，MetaMask 会为你生成一个钱包，并向你显示一个由12个英文单词组成的助记符备份(见 <<metamask_mnemonic>>) 。如果MetaMask或你的计算机出现问题，可以在任何兼容的钱包中使用这些单词来恢复对你资金的访问，此恢复不需要密码; 12个单词就足够了。

[TIP]
====
在纸上备份你的助记符(12个单词) ，两次。将这两份文件备份存放在两个不同的安全位置，如防火保险箱、上锁的抽屉或保险箱。 把纸质备份当作等值的现金存放在你的以太坊钱包里。 任何能接触到这些词的人都能接触到并偷走你的钱。
====

[[metamask_mnemonic]]
.你钱包的助记符备份，由 MetaMask 创建
image::images/metamask_mnemonic.png["MetaMask助记词页面"]

一旦您确认您已经安全地存储了助记符，你将能够看到你的以太坊帐户的详细信息, 见 <<metamask_account>>.(((range="endofrange", startref="ix_02intro-asciidoc5")))

[[metamask_account]]
.你的MetaMask里的以太坊账户
image::images/metamask_account.png["MetaMask账户页面"]

你的帐户页面显示你的帐户名称(默认情况下为"Account 1")、一个 Ethereum 地址(示例中为0x9E713...)和一个彩色图标，以帮助你从视觉上区分该帐户和其他帐户。 在帐户页面的顶部，你可以看到你当前正在使用的 Ethereum 网络(示例中的"主网络")。

恭喜你！ 你已经建立了你的第一个以太坊钱包。(((range="endofrange", startref="ix_02intro-asciidoc4")))

[[switching_networks]]
==== 切换网络

((("MetaMask","network choices")))正如你可以在 MetaMask 帐户页面上看到的，你可以在多个以太坊网络之间进行选择。 默认情况下，MetaMask 将尝试连接到主网络。 其他的选择是公共测试网，任何你选择的以太坊节点，或者在你自己的计算机上运行私有块链的节点(本机) :

以太坊主网:: 主公开以太坊区块链. 真正的ETH, 真正的价值, 以及真正的共识.

Ropsten测试网络:: 以太网公共测试区块链和网络。 这个网络上的 ETH 没有价值

Kovan测试网络:: 以太坊公共测试区块链和网络使用Aura共识协议和权威证明（联合签名）。 该网络上的ETH没有任何价值。 Kovan测试网络仅由Parity支持。其他以太坊客户端使用稍后提出的Clique共识协议， 即基于权威证明的验证。

Rinkeby测试网络:: 以太坊公共测试区块链和网络，使用基于权威证明的Clique共识协议协议(联邦签名)。 这个网络上的 ETH 没有价值。

本机 8545端口:: 连接到与浏览器在同一计算机上运行的节点。 该节点可以是任何公共区块链(主链或测试网)的一部分，或者是一个私人测试网。

自定义 RPC:: 允许你使用与 geth 兼容的远程过程调用(RPC)接口将 MetaMask 连接到任何节点。 该节点可以是任何公共或私人区块链的一部分。

[NOTE]
====
你的 MetaMask 钱包在所有连接到的网络上使用相同的私钥和以太坊账户地址。 然而，你在每个以太网络上的帐户余额是不同的。 例如，你的密钥可以控制 Ropsten 上的以太币和合约，但不能控制主网络。
====

[[getting_test_eth]]
==== 获取一些测试以太币

((("ether (generally)","testnet")))((("MetaMask","and testnet ether")))((("test ether","obtaining")))((("testnet","ether for")))((("wallets","testnet ether and")))你的第一个任务是给钱包充点钱。 你不用在主网上操作毕竟真正的以太币是需要花钱的， 而且你的经验还不够丰富。现在， 在你的钱包里加载测试网络环境。

((("Ropsten Test Network")))将 MetaMask 切换到 Ropsten 测试网络。 单击"购买"，然后单击"测试水龙头"。 Metamask 将打开一个新的网页， 参见： <<metamask_ropsten_faucet>>.

[[metamask_ropsten_faucet]]
.MetaMask Ropsten测试水龙头
image::images/metamask_ropsten_faucet.png["MetaMask Ropsten测试水龙头"]

你可能注意到网页已经包含了你的 MetaMask 钱包的以太坊账户地址。 Metamask 将支持以太坊网络的网页与你的 MetaMask 钱包集成在一起，并且可以"看到"网页上的以太坊账户地址，例如，允许你向显示以太坊地址的在线商店支付。 如果网页需要，MetaMask 也可以用你自己的钱包地址作为收件人地址填充网页。 在这个页面中，水龙头应用程序要求 MetaMask 提供一个钱包地址来发送测试信息。

点击绿色"从水龙头请求1个以太"按钮。 你将在页面的下半部分看到一个交易ID。 水龙头应用程序创建了一个对你支付的交易。 交易ID 如下所示:

[[faucet_tx_id]]
----
0x7c7ad5aaea6474adccf6f5c5d6abed11b70a350fbc6f9590109e099568090c57
----

几秒钟后，新的交易将被 Ropsten 矿工发现，你的 MetaMask 钱包将显示1 ETH 的余额。 点击交易 ID，你的浏览器会把你带到一个区块浏览器，这是一个允许你可视化和浏览区块、地址和交易的网站。MetaMask使用 https://etherscan.io/[Etherscan block explorer] , 最受欢迎的区块链浏览器之一。 含有来自 Ropsten 测试水龙头的付款的交易显示在<<ropsten_block_explorer>>。

[[ropsten_block_explorer]]
.Ropsten测试网络上的区块浏览器
image::images/ropsten_block_explorer.png["Ropsten测试网络上的区块浏览器"]

交易已被记录在 Ropsten区块链上，任何人都可以搜索交易ID或者 http://bit.ly/2Q860Wk[访问链接] 随时查看。

试着访问这个链接，或者在 ropsten.etherscan.io 的网站上输入交易的哈希值，自己去看看。

[[sending_eth_MetaMask]]
==== 在MetaMask发送以太币

((("MetaMask","sending ether from", id="ix_02intro-asciidoc6", range="startofrange")))((("test ether","sending", id="ix_02intro-asciidoc7", range="startofrange")))一旦你在Ropsten测试水龙头收到了第一个测试以太币，你可以试验将以太币发送回测试水龙头。 正如你可以看到的 Ropsten 测试水龙头页面，有一个"捐赠"1 ETH 的水龙头选项。 这个选项是可用的，因此一旦你完成了测试，你就可以返回你的测试以太的其余部分，以便其他人可以下一步使用它。 即使测试网络没有任何价值，一些人还是会将其储存起来，这使得其他人很难使用测试网络。 囤积测试以太币是不可取的！

幸运的是，我们不是测试以太币囤积者。 点击橙色的"1乙醚"按钮，告诉 MetaMask 创建一个交易支付水龙头1以太。 Metamask 将准备一个交易并弹出一个带有确认的窗口，如 <<send_to_faucet>> 所示

[[send_to_faucet]]
.发送1以太到水龙头
image::images/send_to_faucet.png["发送1以太到水龙头"]

嗯哼！ 你可能注意到你无法完成交易&#x2014;metamask 说你的余额不足。 乍一看，这似乎令人困惑: 你有1 ETH，你想发送1 ETH，那么为什么 MetaMask 说你没有足够的资金？

((("gas","basics")))答案是因为gas的成本。 每一笔以太坊交易都需要支付一笔费用，这笔费用由矿工收取以验证交易。 这些费用是以一种叫做gas的虚拟货币形式收取的。 作为交易的一部分，你用以太币付费。

[NOTE]
====
((("gas","on test networks")))测试网络也需要收费。 如果没有费用，测试网络的行为将不同于主网络，使其成为一个不充分的测试平台。 费用还可以保护测试网络免受 DoS 攻击和构造不良的合约(例如，无限循环)的影响，就像它们保护主网络一样。
====

When you sent the transaction, MetaMask calculated the average gas price of recent successful transactions at 3 gwei, which stands for gigawei. Wei is the smallest pass:[<span class="keep-together">subdivision</span>] of the ether currency, as we discussed in <<ether_units>>. The gas limit is set at the cost of sending a basic transaction, which is 21,000 gas units. Therefore, the maximum amount of ETH you will spend is 3 * 21,000 gwei = 63,000 gwei = 0.000063 ETH. (Be advised that average gas prices can fluctuate, as they are predominantly determined by miners. We will see in a later chapter how you can increase/decrease your gas limit to ensure your transaction takes precedence if need be.)

当你发送交易时，MetaMask计算出最近成功交易的平均gas价格为3 gwei，代表gigawei。 正如我们在 <<ether_units>> 中所讨论的那样，wei是以太币的最小 pass:[<span class="keep-together">细分</span>]。 gas限额是以发送基本交易为代价设定的，即21,000个gas单位。 因此，你将花费的最大ETH量为3 * 21,000 gwei = 63,000 gwei = 0.000063 ETH。 （请注意，平均gas价格可能会波动，因为它们主要由矿工决定。我们将在后面的章节中看到如何增加/减少你的gas限制，以确保你的交易得到优先处理。）

这一切都说明: 1 ETH 交易成本1.000063 ETH。 在显示总数时，MetaMask 令人困惑地舍入到1 ETH，但是实际需要的数量是1.000063 ETH，而你只有1 ETH。 单击"拒绝"取消此交易。

让我们再试试测试以太币吧！ 再次点击绿色的"从水龙头请求1ETH"按钮，等待几秒钟。 不要担心，水龙头应该有足够的以太币，如果你需要会给你更多。

一旦你有2 ETH 的余额，你可以再试一次。 这一次，当你点击橙色的"1 ether"捐款按钮时，你就有足够的余额来完成交易。 当 MetaMask 弹出支付窗口时，单击 Submit。 在所有这一切之后，你应该看到一个0.999937 ETH 的平衡，因为你发送1 ETH 到水龙头，0.000063 ETH 在gas中。(((range="endofrange", startref="ix_02intro-asciidoc7")))(((range="endofrange", startref="ix_02intro-asciidoc6")))

[[explore_tx_history]]
==== 探索账户地址的交易历史

((("addresses","exploring transaction history of", id="ix_02intro-asciidoc8", range="startofrange")))((("MetaMask","exploring transaction history of an address with", id="ix_02intro-asciidoc9", range="startofrange")))到目前为止，你已成为使用MetaMask发送和接收测试以太网的专家。 你的钱包已收到至少两笔付款并至少发送一次。 你可以使用 _ropsten.etherscan.io_ 去看浏览器查看所有这些事务。 你可以复制钱包地址并将其粘贴到块浏览器的搜索框中，也可以让MetaMask为你打开页面。 在MetaMask中的帐户图标旁边，你会看到一个显示三个点的按钮。 单击它以显示与帐户相关的选项菜单 (参阅 <<metamask_account_context_menu>>)。

[[metamask_account_context_menu]]
.MetaMask帐户上下文菜单
image::images/metamask_account_context_menu.png["MetaMask帐户上下文菜单"]

选择"在Etherscan上查看帐户"在区块浏览器打开一个页面显示你的帐户的交易历史，如<<block_explorer_account_history>>。

[[block_explorer_account_history]]
.Etherscan上的地址交易历史
image::images/block_explorer_account_history.png["Etherscan上的地址交易历史"]

在这里你可以看到你的以太坊地址的整个交易历史。 它显示了在 Ropsten 区块链上记录的所有交易，其中你的地址是发送者或接收者。 点击其中的一些交易可以看到更多的细节

你可以查看任何地址的交易历史记录。 看一下 Ropsten 测试水龙头地址的交易历史(提示: 它是最早到你地址的付款中列出的"发件人"地址)。 你可以看到所有的从水龙头到你和其他地址的测试以太币。 你看到的每个交易都可以将你引向更多的地址和更多的交易。 不久之后，你将迷失在互联数据的迷宫中。 公共区块链包含了巨大的信息财富，所有这些都可以通过程序来探索，正如我们将在未来的例子中看到的。(((range="endofrange", startref="ix_02intro-asciidoc9")))(((range="endofrange", startref="ix_02intro-asciidoc8"))).(((range="endofrange", startref="ix_02intro-asciidoc3")))(((range="endofrange", startref="ix_02intro-asciidoc2")))

[[intro_world_computer]]
=== 介绍世界电脑

((("Ethereum (generally)","and EVM")))((("EVM (Ethereum Virtual Machine)","as world computer")))((("world computer, Ethereum as")))你现在已经创建了一个钱包，发送和接收以太币。 到目前为止，我们已经把以太坊当作一种加密货币。 但是，以太坊的意义远远不止于此。 事实上，密码货币功能仅是以太坊作为去中心化世界计算机的子功能。 ((("smart contracts","ether and"))) Ether 被用来支付运行 _智能合约_ 的费用，这些合约是在一台被称为 _以太坊虚拟机(EVM)_ 的仿真计算机上运行的计算机程序。

EVM 是一个全局单例模式，这意味着它的操作就像是一个全局的、单实例的计算机，到处运行。 网络中的每个节点都运行一个 EVM 的本地副本来验证合约的执行，而以太坊 区块链记录这个世界计算机在处理交易和智能合约时不断变化的状态。 我们将在<<evm_chapter>>中更详细地讨论这个问题。

[[EOA_contracts]]
=== 外部拥有帐户 (EOAs) 和合约

((("contract accounts", seealso="smart contracts")))((("EOA (Externally Owned Account)","basics")))((("Ethereum (generally)","EOAs and contracts")))((("smart contracts","basics")))你在 MetaMask 钱包中创建的帐户类型称为外部拥有帐户(EOA)。 外部拥有的账户是那些拥有私人密钥的账户; 拥有私人密钥意味着对资金或合约的使用权的控制。 现在，你可能猜测还有另一种类型的账户。 另一种类型的帐户是合约帐户。 一个合约账户有智能的合约代码，外部拥有帐户是没有合约代码的。 此外，合约帐户没有私钥。 相反，它被智能合约代码的逻辑控制和拥有: 在合约创建的时候将软件程序记录在以太坊区块链上， 然后被EVM执行调用。

合约有地址，就像外部账户一样。 合约也可以发送和接收信息，和EOA类似。 但是，当交易目的地是一个合约地址时，它使该合约在 EVM 中运行，使用交易和交易的数据作为其输入。 除了 ether 之外，交易还可以包含数据，即要运行合约中的哪个特定函数以及要传递给该函数的参数。 通过这种方式，交易可以调用合约中的函数。

请注意，由于合约帐户没有私钥，因此无法初始化一个交易。 只有EOA可以启动交易，但合约可以通过调用其他合约来构建复杂的执行路径来对交易作出反应。 这种情况的一个典型用途是EOA向多重签名智能合约钱包发送请求交易以将一些ETH发送到另一地址。 典型的DApp编程模式是让合同A调用合同B，以便在合同A的用户之间维持共享状态。

在接下来的几节中，我们将编写我们的第一份合约。 然后，你将学习如何创建合约、给合约打款和借助 MetaMask 钱包来使用合约，并在 Ropsten 测试网络进行测试。

[[simple_contract_example]]
=== 一个简单的合约: 一个测试以太水龙头

((("contract accounts","creating", seealso="Faucet.sol contract", id="ix_02intro-asciidoc10", range="startofrange")))((("Faucet.sol contract (test example)","creating", id="ix_02intro-asciidoc11", range="startofrange")))以太坊有许多不同的高级语言，所有这些语言都可用于编写合约和生成 EVM 字节码。 你可以在<<high_level_languages>>阅读许多最突出和最有趣的内容。 到目前为止，智能合约编程主要选择的高级语言是: Solidity。 ((("Wood, Dr. Gavin","and Solidity")))Solidity 由本书的合著者 Gavin Wood 博士创造，已经成为以太坊 (以及其他地方)使用最广泛的语言。 我们要用Solidity来写我们的第一份合约。

((("Solidity","faucet.sol and")))我们的第一个例子(<<solidity_faucet_example>>) ，我们将写一个控制水龙头的合约。 你已经使用了一个水龙头来获得 Ropsten 测试网络上的测试以太。 一个水龙头是一个相对简单的东西: 它发出以太给任何需要的地址，并可以定期重新充满。 你可以实现一个水龙头作为一个钱包控制的人或网络服务器。

[[solidity_faucet_example]]
.Faucet.sol: Solidity实现水龙合约
====
[source,solidity,linenums]
----
include::code/Solidity/Faucet.sol[]
----
====

[NOTE]
====
你可以在 https://github.com/ethereumbook/ethereumbook/[本书代码仓库]子目录中找到本书的所有代码示例。 具体来说，我们的 Faucet.sol 合约是: .

----
code/Solidity/Faucet.sol
----
====

这是一个非常简单的合约，尽可能简单。 这也是一个有缺陷的合约，展示了一些不良实践和安全漏洞。 我们将通过在后面的章节中检查它的所有缺陷来学习。 但是现在，让我们一行一行地看看这个合约是做什么的以及它是如何工作的。 你很快就会注意到 Solidity 的许多元素与现有的编程语言类似，比如 JavaScript、 Java 或 Cpass:[++].

第一行是注释:

[[comment]]
[source,solidity]
----
// Our first contract is a faucet!
----

注释供人阅读，不包含在可执行的 EVM 字节码中。 我们通常把它们放在要解释的代码之前，或者有时放在同一行上。 注释以两个前斜杠开头: +//+。 从第一个斜杠到该行结束的所有内容都被视为空行并被忽略。

下一行是我们实际合约的开始:

[[contract_definition]]
[source,solidity]
----
contract Faucet {
----

这一行声明了一个合约对象，类似于其他面向对象语言中的类声明。 合约定义包括花括号(pass:[<code>{}</code>])之间的所有行，花括号定义范围，非常类似于在许多其他编程语言中的使用方式。

接下来，我们声明水龙头合约的第一个函数:

[[withdraw_function]]
[source,solidity]
----
function withdraw(uint withdraw_amount) public {
----

函数名为 +withdraw+，它接受一个名为 +withdraw_amount+ 的无符号整数(+uint+)参数。 它被声明为一个公共函数，这意味着它可以被其它合约调用。 函数定义在大括号之间。 提款功能的第一部分规定了提款的限制:

[[withdraw_limit]]
[source,solidity]
----
require(withdraw_amount <= 100000000000000000);
----

它使用内置的Solidity函数要求测试一个先决条件，即取款金额小于或等于100,000,000,000,000,000,000wei，这是以太的基本单位(见 <<ether_denominations>>) ，相当于0.1以太。 如果调用 withdraw 函数时提取的金额大于该金额，则此处的 require 函数将导致合约执行停止并失败(带有异常)。 注意，Solidity 中语句需要以分号结束。

合约的这一部分是我们水龙头的主要逻辑。 它通过限制提款来控制合约外的资金流动。 这是一个非常简单的控制，但可以让你瞥见一个可编程区块链的力量: 去中心化的来软件控制金钱。

接下来是实际的提款:

[[withdraw_command]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

A couple of interesting things are happening here. The +msg+ object is one of the inputs that all contracts can access. It represents the transaction that triggered the execution of this contract. The attribute +sender+ is the sender address of the transaction. The function +transfer+ is a built-in function that transfers ether from the current contract to the address of the sender. Reading it backward, this means +transfer+ to the +sender+ of the +msg+ that triggered this contract execution. The +transfer+ function takes an amount as its only argument. We pass the +withdraw_amount+ value that was the parameter to the +withdraw+ function declared a few lines earlier.

这里发生了一些有趣的事情。 +msg+ 对象是所有合约都可以访问的输入之一。 它表示触发了合约执行的交易。 属性 sender 是交易发起人的地址。 函数+transfer+是一个内置的函数，它将以太从当前合约传输到发送方的地址。 向后读，这意味着将其传输到触发此合约执行的 msg 的发送方。 +transfer+函数以amount作为它唯一的参数。 我们将 +withdraw_amount+ 传递给前面声明的 +withdraw+ 函数。

下一行是结束花括号，表示 +withdraw+ 函数定义的结束。

接下来，我们再声明一个函数:

[[fallback_function]]
[source,solidity]
----
function () public payable {}
----

((("fallback function")))This function is a so-called _fallback_ or _default_ function, which is called if the transaction that triggered the contract didn't name any of the declared functions in the contract, or any function at all, or didn't contain data. Contracts can have one such default function (without a name) and it is usually the one that receives ether. That's why it is defined as a public and payable function, which means it can accept ether into the contract. It doesn't do anything, other than accept the ether, as indicated by the empty definition in the curly braces pass:[(<code>{}</code>)]. If we make a transaction that sends ether to the contract address, as if it were a wallet, this function will handle it.

((("fallback function"))) 这个函数是所谓的fallback函数或默认函数，如果触发合约的交易没有指定合约中任何已声明的函数，或者根本没有任何函数，或者不包含数据，则调用该函数。 合约可以有一个这样的默认函数(没有名称) ，它通常是接收以太的函数。 这就是为什么它被定义为一个公共的、可支付的函数，这意味着它可以在合约里接受以太。 它不做任何事情，除了接受以太，如大括号({})中的空定义所示。 如果我们进行一个交易，将信息发送到合约地址，就像它是一个钱包，这个fallback函数将处理它。

在我们默认函数的正下方是最后关闭的花括号，它关闭了水龙头合约的定义。 就是这样！(((range="endofrange", startref="ix_02intro-asciidoc11")))(((range="endofrange", startref="ix_02intro-asciidoc10")))

[[compile_faucet_contract]]
=== Compiling the Faucet Contract

((("compiling","Faucet.sol contract", id="ix_02intro-asciidoc12", range="startofrange")))((("Faucet.sol contract (test example)","compiling", id="ix_02intro-asciidoc13", range="startofrange")))现在我们有了第一个示例合约，我们需要使用 solidity 编译器将 solidity 代码转换为 EVM 字节码，这样它就可以在区块链上通过EVM 执行了。

Solidity 编译器作为独立的可执行文件，作为各种框架的一部分，并捆绑在集成开发环境(Integrated Development environment，IDEs)中。 为了保持简单，我们将使用一个更流行的 ide，称为 _Remix_

((("Remix IDE")))使用你的 Chrome 浏览器(带有你之前安装的 MetaMask 钱包)导航到 https://remix.ethereum.org[] 的 Remix IDE。

当你第一次加载 Remix 时，它将从一个名为 ballot.sol 的示例合约开始。 我们不需要这个，所以通过单击选项卡角上的 x 来关闭它，见 <<remix_close_tab>>。

[[remix_close_tab]]
.关闭默认的样例tab页
image::images/remix_close_tab.png["关闭默认的样例tab页"]

现在，通过单击左上方工具栏中的圆形加号添加一个新标签，如 <<remix_toolbar>>。 将新文件命名为 _Faucet.sol_。

[[remix_toolbar]]
.单击加号打开一个新标签
image::images/remix_toolbar.png["单击加号打开一个新标签"]

Once you have the new tab open, copy and paste the code from our example _Faucet.sol_, as seen in <<remix_faucet_load>>.

打开新标签页后，复制并粘贴来自我们示例 Faucet.sol 的代码，如<<remix_faucet_load>>所示。

[[remix_faucet_load]]
.拷贝水龙头样例代码到新tab页
image::images/remix_faucet_load.png["拷贝水龙头样例代码到新tab页"]

Once you have loaded the _Faucet.sol_ contract into the Remix IDE, the IDE will automatically compile the code. If all goes well, you will see a green box with "Faucet" in it appear on the right, under the Compile tab, confirming the successful compilation (see <<remix_compile>>).

一旦你将 _Faucet.sol_ 合约加载到 Remix IDE 中，IDE 将自动编译代码。 如果一切顺利，你将看到右侧编译选项卡下出现一个带有"Faucet"的绿色框，确认编译成功(参见 <<remix_compile>>)。

[[remix_compile]]
.Remix成功编译Faucet.sol合约
image::images/remix_compile.png[""]

如果出了问题，最有可能的问题是 Remix IDE 使用了不同于0.4.19的 Solidity 编译器版本。 在这种情况下，我们的 pragma 指令将阻止 _Faucet.sol_ 编译。 若要更改编译器版本，请转到"设置"选项卡，将版本设置为0.4.19，然后再试一次。

Solidity 编译器现在已经将我们的 _Faucet.sol_ 编译成 EVM 字节码。 如果你很好奇，字节码看起来是这样的:

[[faucet_bytecode]]
----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST PUSH1 0xE5 DUP1 PUSH2 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN
STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI
PUSH1 0x0 CALLDATALOAD PUSH29
0x100000000000000000000000000000000000000000000000000000000
SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x2E1A7D4D EQ PUSH1 0x41 JUMPI
JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT
JUMPDEST PUSH1 0x5F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1
SWAP2 SWAP1 POP POP PUSH1 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH8
0x16345785D8A0000 DUP2 GT ISZERO ISZERO ISZERO PUSH1 0x77 JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND
PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1
0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO
ISZERO PUSH1 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6
0x627A7A723058 KECCAK256 PUSH9 0x13D1EA839A4438EF75 GASLIMIT CALLVALUE LOG4 0x5f
PUSH24 0x7541F409787592C988A079407FB28B4AD000290000000000
----

你是否很高兴自己使用了 Solidity 这样的高级语言，而不是直接在 EVM 字节码中编程？ 我也是！(((range="endofrange", startref="ix_02intro-asciidoc13")))(((range="endofrange", startref="ix_02intro-asciidoc12")))

[[create_contract]]
=== 在区块链上创建合约

((("blockchain","creating contract on", id="ix_02intro-asciidoc14", range="startofrange")))((("Faucet.sol contract (test example)","on the blockchain", id="ix_02intro-asciidoc15", range="startofrange")))所以，我们有了合约。 我们已经将它编译成字节码。 现在，我们需要在以太区块链上"注册"合约。 我们将使用 Ropsten testnet 来测试我们的合约，所以我们想要提交合约的区块链。

((("zero address","contract registration")))在区块链上注册合约需要创建一个特殊的交易，其目的地地址是地址+0x0000000000000000000000000000000000000000+，也称为 _零地址_。 零地址是一个特殊的地址，告诉以太坊区块链，你想要注册一个合约。 幸运的是，Remix IDE 将为你处理所有这些问题，并将交易发送到 MetaMask。transaction to MetaMask.

((("Remix IDE", id="ix_02intro-asciidoc16", range="startofrange")))首先，切换到 Run 选项卡，并在 Environment 下拉选择框中选择 Injected Web3。 这将 Remix IDE 连接到 MetaMask 钱包，并通过 MetaMask 连接到 Ropsten 测试网络。 一旦你这样做，你可以看到环境下的 Ropsten。 此外，在帐户选择框中，它显示了你钱包的地址(see <<remix_run>>)。

[[remix_run]]
.Remix IDE 运行tab页, 在environment下选择Injected Web3
image::images/remix_run.png["Remix IDE 运行tab页, 在environment下选择Injected Web3"]

就在你刚刚确认的Run设置下面，是 +Faucet+ 合约，已经创建好了。 在<<remix_run>> 点击Deploy按钮。

Remix 将构造特殊的"创建"事务，MetaMask 将要求你批准它，如 <<remix_metamask_create>> 所示。 你会注意到，合约创建交易中没有一台，但它有258个字节的数据(编译后的合约) ，将消耗10个 gwei 的gas。 单击"提交"批准它。

[[remix_metamask_create]]
.MetaMask上显示合约创建交易
image::images/remix_metamask_create.png["MetaMask上显示合约创建交易"]

现在你必须等待。 这份合约被打包大约需要15至30秒。 Remix看起来不会做更多，但是要有耐心。

一旦创建了合约，它就会出现在 Run 选项卡的底部(见 <<remix_contract_interact>>).

[[remix_contract_interact]]
.水龙头合约好了!
image::images/remix_contract_interact.png["水龙头合约好了!"]

注意，水龙头合约现在有了自己的地址:&#x201c;Faucet at 0x72e...c7829&#x201d; (尽管你的地址、随机的字母和数字将有所不同)。 右边的小剪贴板符号允许你将合约地址复制到剪贴板。 我们将在下一节中使用它。(((range="endofrange", startref="ix_02intro-asciidoc16")))(((range="endofrange", startref="ix_02intro-asciidoc15")))

[[interact_contract]]
=== 和合约互动

((("Faucet.sol contract (test example)","interacting with", id="ix_02intro-asciidoc17", range="startofrange")))让我们回顾一下我们到目前为止所学到的: 以太坊合约是一种控制货币的程序，它运行在一个叫做 EVM 的虚拟机中。 他们是由一个特殊的交易，提交的字节码被记录在区块链。 一旦他们在区块链上创建好，就有一个以太坊的地址，就像钱包。 任何时候，当有人将一个交易发送到一个pass:[<span class="keep-together">合约</span>] 地址时，都会导致该合约在 EVM 中运行，并将该交易作为其输入。 发送到合约地址的交易可能有以太或数据，或者两者兼有。 如果它们含有以太币，则"存入"合约余额。 如果它们包含数据，数据可以在合约中指定一个命名函数并调用它，将参数传递给该函数。

[[view_contract_address]]
==== 在去看浏览器里查看合约地址

((("Faucet.sol contract (test example)","viewing contract address in a block explorer")))我们现在有一个合约记录在区块链上，我们可以看到它有一个以太坊的地址。 让我们在 _ropsten.etherscan.io_ 区块浏览器里来看看这个合约到底是什么样子的。 在 Remix IDE 中，通过单击名称旁边的剪贴板图标来复制合约的地址(参见 <<remix_contract_address>>)。

[[remix_contract_address]]
.在Remix里拷贝合约地址
image::images/remix_contract_address.png["在Remix里拷贝合约地址"]

保持Remix打开，我们稍后再来讨论它。 现在，导航你的浏览器到  ropsten.etherscan.io ，并将地址粘贴到搜索框中。 你应该看到合约的以太坊地址历史记录，如<<etherscan_contract_address>>.(((range="endofrange", startref="ix_02intro-asciidoc17")))

[[etherscan_contract_address]]
.在 Etherscan 区块浏览器中查看水龙头合约地址
image::images/etherscan_contract_address.png["在 Etherscan 区块浏览器中查看水龙头合约地址"]

[[fund_contract]]
==== 为合约提供资金

((("Faucet.sol contract (test example)","sending ether to", id="ix_02intro-asciidoc18", range="startofrange")))目前，合约在其历史上只有一个交易: 合约创建交易。 正如你所看到的，合约里也没有以太(余额为零)。 这是因为我们没有在创建交易的时候往合约里发送以太（其实是可以的）。

Our faucet needs funds! Our first project will be to use MetaMask to send ether to the contract. You should still have the address of the contract in your clipboard (if not, copy it again from Remix). Open MetaMask, and send 1 ether to it, exactly as you would to any other Ethereum address (see <<metamask_send_to_contract>>).

我们的水龙头需要资金！ 我们的第一个项目将是使用 MetaMask 发送以太的合同。 你应该仍然有你的剪贴板合约的地址(如果没有，从 Remix复制)。 打开 MetaMask，并发送1以太到该合约地址(见 <<metamask_send_to_contract>>)。

[[metamask_send_to_contract]]
.发送1以太到合约地址
image::images/metamask_send_to_contract.png[""]

在一分钟内，如果你重新加载 Etherscan 区块浏览器，它将显示合约地址的另一笔交易以及更新余额1以太。

还记得我们的 Faucet.sol 代码中的未命名的默认公共fallback函数吗？ 它看起来像这样:

[[fallback_function_review]]
[source,solidity]
----
function () public payable {}
----

When you sent a transaction to the contract address, with no data specifying which function to call, it called this default function. Because we declared it as +payable+, it accepted and deposited the 1 ether into the contract's account balance. Your transaction caused the contract to run in the EVM, updating its balance. You have funded your faucet!(((range="endofrange", startref="ix_02intro-asciidoc18")))

当你将交易发送到合约地址，而没有指定调用哪个函数时，它就调用这个缺省函数。 因为我们声明它为payable，它接受并存入以太的合约的帐户余额。 你的交易导致合约在 EVM 中运行，并更新其余额。 往你的水龙头打款成功！(((range="endofrange", startref="ix_02intro-asciidoc18")))

[[withdraw_from_contract]]
==== 从合约里提款

((("Faucet.sol contract (test example)","withdrawing funds from", id="ix_02intro-asciidoc19", range="startofrange")))((("withdrawal of funds from contract", id="ix_02intro-asciidoc20", range="startofrange")))接下来外面从水龙头合约里提取一些资金。 为了提取资金， 我们必须构建一个交易， 该交易将会调用 +withdraw+ 函数并提供一个 +withdraw_amount+ 参数。 简单起见， Remix将为我们构建这个交易， 而我们的审批将在MetaMask完成。

Return to the Remix tab and look at the contract on the Run tab. You should see a red box labeled +withdraw+ with a field entry labeled +uint256 withdraw_amount+ (see <<remix_contract_withdraw>>).

回到Remix的tab页看下在Run tab选项下的合约。你应该看到一个标签为 +withdraw+ 的红色的框， 其字段条目标记为+uint256 withdraw_amount+(见 <<remix_contract_withdraw>>).

[[remix_contract_withdraw]]
.Remix里Faucet.sol的withdraw函数
image::images/remix_contract_interact.png["Remix里Faucet.sol的withdraw函数"]

这是合约的 Remix 接口。 它允许我们构造调用合约中已经定义的函数的交易。 我们将输入一个提款金额，然后单击withdraw按钮来产生交易。

首先，让我们算一算取款金额。 我们想提取0.1一台，这是我们合同允许的最高金额。 请记住，所有在以太坊中 的货币的值都是以wei为单位的，我们的 +withdraw+ 函数需要的 +withdraw_amount+ 参数也是以wei为单位。 我们需要的量是0.1个以太，也就是100,000,000,000,000,000威(1后面跟17个零)。



[TIP]
====
由于 JavaScript 的限制，Remix 无法处理大小为10 ^ 17的数字。 相反，我们将其括在双引号中，以便允许 Remix 将其作为字符串接收并将其作为 BigNumber 进行操作。 如果我们没有将它括起来，那么 Remix IDE 将无法处理它并显示"Error encoding arguments: Error: Assertion failed"
====

在 +withdraw_amount+ 框中键入"100000000000000000"(带有引号) ，然后单击"withdraw"按钮(见 <<remix_withdraw>>)。

[[remix_withdraw]]
.在Remix中点击"withdraw"来构建一个提款交易
image::images/remix_withdraw.png[""]

Metamask 会弹出一个交易窗口让你批准。 单击 Submit 将向合约发送提款调用(见 <<metamask_withdraw>>)。

[[metamask_withdraw]]
.调用withdraw函数的MetaMask交易
image::images/metamask_withdraw.png["调用withdraw函数的MetaMask交易"]

等待一分钟，然后重新加载 Etherscan区块浏览器，以查看反映在龙头合同地址历史记录中的交易(见 <<etherscan_withdrawal_tx>>)

[[etherscan_withdrawal_tx]]
.在Etherscan中查看调用withdraw函数的交易
image::images/etherscan_withdrawal_tx.png["在Etherscan中查看调用withdraw函数的交易"]


现在，我们看到一个新的交易，其目的地为契约地址，值为0 ether。 合约余额已经改变，现在是0.9一台，因为它发送给我们0.1以太。 但是我们在地址历史记录中没有看到"OUT"交易。

取款在哪里？ 合约的地址历史页面上出现了一个新标签，名为"内部交易"。 因为0.1以太传输源于合约代码，所以它是一个内部交易(也称为消息)。 单击该选项卡可以查看它(见 <<etherscan_withdrawal_internal>>)。

This "internal transaction" was sent by the contract in this line of code (from the pass:[<code><span class="keep-together">withdraw</span></code>] function in _Faucet.sol_):

[[withdraw_command_review]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

总结一下: 你从 MetaMask 钱包中发送了一个交易处理，其中包含调用提款函数的指令，提款金额参数为0.1 ether。 该交易导致合约在 EVM 中运行。 由于 EVM 运行了水龙头合同的提款函数，它首先调用请求函数并验证请求的金额小于或等于允许提款的最大值0.1以太。 然后它调用 +transfer+ 函数将以太传送给你。 运行 +transfer+ 函数生成了一个内部事务，将合同余额中的0.1存入到你的钱包地址中。 也就是显示在 Etherscan 的内部交易标签上的那个。(((range="endofrange", startref="ix_02intro-asciidoc20")))(((range="endofrange", startref="ix_02intro-asciidoc19"))).(((range="endofrange", startref="ix_02intro-asciidoc14")))

[[etherscan_withdrawal_internal]]
.Etherscan显示合约上内部交易里的交易传输
image::images/etherscan_withdrawal_internal.png["Etherscan显示合约上内部交易里的交易传输"]

[[intro_conclusion]]
=== 结论

在本章中，你使用 MetaMask 设置了一个钱包，并使用 Ropsten 测试网络上的一个水龙头为其提供资金。 在你的钱包的以太坊地址接受到了以太币，然后你发送以太到水龙头合约的以太坊地址。

接下来，你在 solidatity 中写了一个水龙头合约。 你使用 Remix IDE 将合约编译成 EVM 字节码，然后使用 Remix 产生一笔交易，并在 Ropsten 区块链上创建水龙头合约。 一旦创建，水龙头合同有一个以太坊地址，你给它一些以太。 最后，构造了一个交易来调用 +withdraw+ 函数，并成功地请求了0.1 ether。 合约检查了请求，并发送给你0.1以及一个内部交易。

它可能看起来不是很多，但是你已经成功地与去中心化的世界计算机上的软件进行了互动， 该软件可以控制资金。

我们将在 <<smart_contracts_chapter>> 中进行更多的智能合约编程，并在 <<smart_contract_security>>学习最佳实践和安全事项。(((range="endofrange", startref="ix_02intro-asciidoc0")))
