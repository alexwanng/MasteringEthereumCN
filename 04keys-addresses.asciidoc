[[keys_addresses]]
== 密码学

((("cryptography", id="ix_04keys-addresses-asciidoc0", range="startofrange")))One of Ethereum's foundational technologies is ((("cryptography","defined")))密码学是以太坊的基础技术之一，是计算机安全中广泛使用的数学分支。密码学在希腊语中的意思是“秘密书写”，也就是所谓的加密，但是密码学的研究不仅仅包括秘密书写。例如，密码学也可用于在不泄露秘密的情况下证明对该秘密的了解(例如，使用数字签名)，或用于证明数据的真实性(例如，使用数字指纹，也称为“散列”)。这些类型的密码证明是对Etherum平台(以及实际上所有区块链系统)的操作至关重要的数学工具，并在Etherum应用程序中广泛使用。 ((("encryption", seealso="keys and addresses")))

请注意，在发布时，以太坊协议的任何部分都不涉及加密; 也就是说，与以太坊平台和节点之间的所有通信（包括交易数据）都是未加密的，任何人都可以（必然）阅读。 这样每个人都可以验证状态更新的正确性，并达成共识。 将来，将提供高级加密工具，例如零知识证明和同态加密，这些工具将允许一些加密计算记录在区块链上，同时仍然能够达成共识; 但是，虽然已经为这些工具作了规定，但尚未部署。

在这一章中，我们将介绍在以太中使用的一些密码技术: 即公钥加密(PKC) ，它以私钥和地址的形式用于控制资金的所有权。

[[keys_addresses_intro]]
=== 私钥和地址

((("cryptography","keys and addresses")))((("EOA (Externally Owned Account)","keys and addresses")))((("keys and addresses")))正如我们在本书前面所看到的，以太坊有两种不同类型的账户: 外部拥有账户和合约。 外部拥有账户对以太的所有权是通过数字私钥、以太地址和数字签名建立的。 ((("private keys", seealso="keys and addresses")))私钥是所有用户与以太坊交互的核心。 事实上，账户地址是直接从私钥派生出来的: 一个私钥唯一地确定一个单独的以太坊地址，也称为账户。

私钥在以太坊系统中不以任何方式直接使用; 它们从未被传输或存储在以太网上。 也就是说，私钥应该保持私有，不应该出现在传递给网络的消息中，也不应该存储在链上; 只有帐户地址和数字签名才能在以太坊系统上传输和存储。 有关如何保护私人密钥安全的更多信息，请参见<<control_responsibility>> 和 <<wallets_chapter>>。

((("digital signatures")))资金的访问和控制是通过数字签名实现的，数字签名也是使用私钥创建的。以太坊的交易需要一个有效的数字签名包含在区块链中。任何拥有私人密钥副本的人都可以控制相应的帐户和它所持有的任何以太。 假设用户的私钥是安全的，那么以太坊 交易中的数字签名就证明了基金的真正所有者，因为它们证明了私钥的所有权。

((("key pairs")))在基于公钥加密的系统中，如以太坊使用的系统，密钥成对出现，包括一个私有(秘密)密钥和一个公共密钥。 可以将公钥看作类似于银行帐号，私钥看作类似于秘密 PIN码; 后者提供对帐号的控制，前者识别他人账号。 私钥本身很少被以太坊用户看到; 在大多数情况下，它们以特殊文件的形式存储(加密) ，并由以太坊钱包软件管理。

在以太坊交易的支付部分，预定的收款人由以太地址代表，该地址的使用方式与银行转账的受益人账户细节相同。 我们很快会看到更多细节，EOA 的以太坊地址是由密钥对的公钥部分生成的。 然而，并非所有以太坊 地址都表示公-私密钥对; 它们也可以表示合约，正如我们将在 <<smart_contracts_chapter>> 中看到的那样，合约没有私钥支持。

在本章的其余部分，我们将首先更详细地探讨基本的密码学，并解释以太坊中使用的数学。 然后，我们将研究如何生成、存储和管理密钥。 最后，我们将回顾用于表示私钥、公钥和地址的各种编码格式。

[[pkc]]
=== 公钥密码学和加密货币

((("cryptography","public key cryptography and cryptocurrency", id="ix_04keys-addresses-asciidoc1", range="startofrange")))((("public key cryptography", id="ix_04keys-addresses-asciidoc2", range="startofrange")))公钥加密(也称为"非对称密码术")是现代信息安全的核心部分。((("Diffie, Whitfield")))((("Hellman, Martin")))((("key exchange protocol")))((("Merkle, Ralph"))) 密钥交换协议是一项重大突破，引发了公众对密码学领域的第一次大浪潮。该协议由Martin Hellman, Whitfield Diffie, 和 Ralph Merkle于20世纪70年代首次发表。 在20世纪70年代之前，各国pass:[<span class="keep-together">政府</span>]一直对强大的密码学知识保密。

公钥加密使用唯一的密钥来保护信息。 这些密钥基于具有特殊属性的数学函数: 计算它们很容易，但计算它们的反函数很难。 基于这些函数，加密技术可以创建数字机密和不可伪造的数字签名，这些都是受数学法则保护的。

例如，两个大素数相乘是很简单的。 ((("prime factorization")))但是给定两个大质数的乘积，要找到质因数是非常困难的(这个问题叫做素因数分解)。 假设我们给出数字8,018,009，告诉你它是两个素数的乘积。 找到这两个素数对你来说比我把它们相乘得到8018009要难得多。

((("trapdoor functions")))如果你知道一些秘密信息，这些数学函数中的一些可以很容易地被反转。 在前面的例子中，如果我告诉你一个质因数是2003，你可以用一个简单的除法找到另一个质因数: 8,018,009 ÷ 2,003 = 4,003。 这类函数通常被称为暗门函数，因为它们非常难以反转，除非你得到一条秘密信息，这条信息可以作为反转函数的捷径。

((("elliptic curve cryptography")))在密码学中有用的更高级的一类数学函数是基于椭圆曲线的算术运算。 在椭圆曲线算术中，模素数的乘法很简单，但是除法(逆法)几乎是不可能的。 ((("discrete logarithm problem")))这就是所谓的离散对数问题，目前还没有已知的暗门。 椭圆曲线密码学在现代计算机系统中被广泛使用，是以太坊(和其他加密货币)使用私钥和数字签名的基础。

[NOTE]
====
如果你有兴趣阅读更多关于密码学和现代密码学中使用的数学函数的知识，请查看以下资源:

* http://bit.ly/2DcwNhn[密码学]

* http://bit.ly/2zeZV3c[暗门函数]

* http://bit.ly/2ACJjnV[素因式分解]

* http://bit.ly/2Q7mZYI[离散对数]

* http://bit.ly/2zfeKCP[椭圆曲线密码学]

====
在以太坊中我们使用公钥加密(也称为非对称加密)来创建我们在本章中讨论过的公私钥对。 它们被认为是"一对"，因为公钥是从私钥派生的。 通过分别提供一个可公开访问的帐户句柄(地址)和对帐户中任何以太的访问以及使用智能合约时对帐户需要的任何身份验证的私人控制，它们代表了一个以太坊帐户。((("digital signatures","private key and"))) 私钥通过作为创建数字签名所需的唯一信息来控制访问，数字签名需要签署交易才能使用账户中的任何资金。 数字签名还用于对合约所有者或用户进行身份验证，我们将在<<smart_contracts_chapter>>中看到这一点。

[TIP]
====
((("key pairs")))在大多数钱包实现中，为了方便起见，私钥和公钥作为密钥对存储在一起。 但是，可以通过私钥计算公钥，因此也可以只存储私钥。
====

可以创建数字签名来对任何消息进行签名。 对于以太坊交易，交易本身的详细信息用作消息。 密码学的数学——在这种情况下称为椭圆曲线密码学——提供了一种将消息(即交易细节)与私钥结合起来创建只有在知道私钥的情况下才能生成的代码的方法。 这种代码称为数字签名。 请注意，一个 Ethereum 交易基本上是一个访问具有特定 Ethereum 地址的特定帐户的请求。 当交易发送到 Ethereum 网络以转移资金或与智能合约互动时，需要使用与该 Ethereum 地址相对应的私钥创建的数字签名发送交易。 椭圆曲线数学意味着任何人都可以通过检查数字签名是否匹配交易细节和被请求访问的以太坊地址来验证交易是否有效。 验证根本不涉及私钥; 私钥仍然是私有的。 然而，核查过程毫无疑问地确定，交易只能来自拥有与 Ethereum 地址后面的公钥相对应的私钥的人。 这就是公钥加密的"魔力"。

[TIP]
====
作为以太坊协议的一部分，没有加密&#x2014;作为以太坊网络操作的一部分发送的所有消息都可以（必然）被所有人读取。 因此，私钥仅用于创建用于事务认证的数字签名。(((range="endofrange", startref="ix_04keys-addresses-asciidoc2")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc1")))
====



[[private_keys]]
=== 私钥

((("private keys", id="ix_04keys-addresses-asciidoc3", range="startofrange")))私钥只是一个随机选取的数字。私钥的所有权和控制权是用户控制与相应的 Ethereum 地址相关联的所有资金以及访问授权该地址的合约的根源。私钥用于通过证明交易中使用的资金的所有权来创建交易所需的签名。 ((("warnings and cautions","private key protection")))私钥在任何时候都必须保密，因为将其泄露给第三方等同于让他们控制以太和由私钥保护的合约。 还必须备份私钥，并保护私钥不会意外丢失。如果它丢失了，就不可能再找回来，由它保护的资金也将永远消失。

[TIP]
====
以太坊私钥只是一个数字。 随机挑选私人钥匙的一种方法是简单地使用硬币、铅笔和纸: 掷硬币256次，你就有了一个随机私人钥匙的二进制数字，你可以在一个 Ethereum 钱包中使用(见下一节)。 然后可以从私钥生成公钥和地址。
====

[[generating_private_key]]
==== 从随机数生成私钥

((("entropy","private key generation and")))((("private keys","generating from random number")))((("random numbers, private key generation from")))生成密钥的第一步也是最重要的一步是找到熵或随机性的安全源。 创建一个 Ethereum 私钥实质上需要在1到 2^256^ 之间选择一个数字。 只要这个数字不是可预测的或者确定的，你用来选择这个数字的确切方法就无关紧要。 以太坊软件使用底层操作系统的随机数发生器产生256个随机位。 通常，操作系统的随机数生成器是由一个人工随机源来初始化的，这就是为什么你可能会被要求摆动鼠标几秒钟，或者按下键盘上的随机键。 另一种选择可能是计算机麦克风通道上的宇宙辐射噪声。

More precisely, a private key can be any nonzero number up to a very large number slightly less than 2^256^&#x2014;a huge 78-digit number, roughly 1.158 * 10^77^. The exact number shares the first 38 digits with 2^256^ and is defined as the order of the elliptic curve used in Ethereum (see <<elliptic_curve>>). To create a private key, we randomly pick a 256-bit number and check that it is within the valid range. In programming terms, this is usually achieved by feeding an even larger string of random bits (collected from a cryptographically secure source of randomness) into a 256-bit hash algorithm such as Keccak-256 or SHA-256, both of which will conveniently produce a 256-bit number. If the result is within the valid range, we have a suitable private key. Otherwise, we simply try again with another random number.

更准确地说，一个私钥可以是任何非零数字，最大可以是一个略小于2256的非常大的数字&#x2014;一个巨大的78位数字，大约为1.158 * 10^77^。 精确的数字是2^256^的前38位数字，并被定义为以太坊使用的椭圆曲线的顺序(见椭圆曲线密码学解释)。要创建一个私钥，我们随机选择一个256位的数字，并检查它是否在有效范围内。 在编程术语中，这通常是通过将更大的随机位串(从密码安全随机源收集)输入256位哈希算法(如 Keccak-256或 SHA-256)来实现的，这两种算法都可以方便地生成256位的数字。如果结果在有效范围内，我们就有一个合适的私钥。 否则，我们只需用另一个随机数再试一次。

[TIP]
====
2^256^&#x2014;以太坊的私钥空间的大小&#x2014;是一个深不可测的大数。 它大约是十进制中的10^77^，也就是一个77位的数字。 相比之下，可见宇宙估计包含10^80^个原子。 因此，几乎有足够的私钥给宇宙中的每一个原子一个以太坊帐户。 如果你随机选择一个私钥，任何人都不可能猜到或者自己选择私钥。
====

请注意，私钥生成过程是离线的; 它不需要与以太网络进行任何通信，甚至不需要与任何人进行任何通信。 因此，为了选择一个别人永远不会选择的数字，它必须是真正随机的。 如果你自己选择的数字，其他人尝试它(然后偷走你的以太)的可能性太高。 使用糟糕的随机数生成器(比如大多数编程语言中的伪随机函数)更糟糕，因为它更明显，更容易复制。 就像在线账户的密码一样，私钥需要不可猜测。 幸运的是，你永远不需要记住私钥，因此你可以采用最好的方法来选择它: 即真正的随机性。

[WARNING]
====
不要编写自己的代码来创建随机数，也不要使用由编程语言提供的"简单"随机数生成器。 使用密码安全的伪随机数生成器(例如 CSPRNG)和来自足够熵源的种子是至关重要的。 研究你选择的随机数生成器库的文档，以确保它在密码学上是安全的。 CSPRNG 库的正确实现对密钥的安全性至关重要。
====

以下是以十六进制格式显示的随机生成的私钥(256位表示为64个十六进制数字，每个4位) :(((range="endofrange", startref="ix_04keys-addresses-asciidoc3")))

[[prv_key_example]]
----
f8f8a2f43c8376ccb0871305060d7b27b0554d2cc72bccf41b2705608452f315
----


[[pubkey]]
=== 公钥

((("cryptography","public keys", id="ix_04keys-addresses-asciidoc4", range="startofrange")))((("elliptic curve cryptography","public key generation", id="ix_04keys-addresses-asciidoc5", range="startofrange")))((("public keys", seealso="keys and addresses", id="ix_04keys-addresses-asciidoc6", range="startofrange")))以太坊公钥是椭圆曲线上的一个点，这意味着它是满足椭圆曲线方程的一组 x 和 y 坐标。

简单地说，一个以太坊公钥是两个数字，连接在一起。 这些数字是通过只能单向运算的私钥产生的。 这意味着，如果你拥有私钥，那么计算公钥是很简单的，但是你不能从公钥计算私钥。

[WARNING]
====
数学就要开始了！ 不要惊慌。 如果你在以下段落的任何地方开始迷失，你可以跳过接下来的几个部分。 有许多工具和库可以为你做数学计算。
====

使用椭圆曲线乘法从私钥中计算公钥，实际上是不可逆的: _K_ = _k_ * _G_，其中 _k_ 是私钥，_G_ 是一个常数点，称为 ((("generator point"))) 生成点，_K_ 是结果公钥，* 是特殊的椭圆曲线"乘法"算子。 注意，椭圆曲线乘法不同于正规乘法。 它与普通乘法具有相同的功能属性，但仅此而已。 例如，反向运算(对于正态数来说是除法) ，即所谓的"求离散对数"&#x2014;也就是说，如果你知道 __K__ ，计算 _k_ &#x2014;和尝试 _k_ 的所有可能值一样困难(这个暴力搜索法可能需要的时间比这个宇宙所允许的要多)。

简而言之: 椭圆曲线上的算术不同于"常规"整数算术。 一个点(_G_)可以乘以一个整数(_k_)得到另一个点(_K_)。 但是没有除法这回事，所以不可能简单地用点 _G_ "除"公钥 _K_ 来计算私钥 _k_。这是 <<pkc>>中描述的单向数学函数。

[NOTE]
====
((("one-way functions")))椭圆曲线乘法是密码学家称之为"单向"函数的一类函数，它在一个方向(乘法)上容易实现，在反方向(除法)上不可能实现。 私钥的所有者可以很容易地创建公钥，然后与外界共享它，因为他知道没有人可以反转这个函数并从公钥计算私钥。 这种数学技巧成为不可伪造和安全的数字签名的基础，证明了以太坊基金的所有权和对合约的控制。
====

在演示如何从私钥生成公钥之前，让我们更详细地了解一下椭圆曲线密码学。

[[elliptic_curve]]
==== 椭圆曲线密码学解释

((("elliptic curve cryptography","basics", id="ix_04keys-addresses-asciidoc7", range="startofrange")))椭圆 ((("elliptic curve cryptography", id="ix_04keys-addresses-asciidoc8", range="startofrange")))((("public keys","elliptic curve cryptography and", id="ix_04keys-addresses-asciidoc9", range="startofrange")))曲线加密是一种基于离散对数问题的非对称公钥密码体制，它是由椭圆曲线点上的加法和乘法表示出来的。

<<ecc-curve>> 是一个椭圆曲线的例子，类似于以太坊所使用的。

[NOTE]
====
((("secp256k1 elliptic curve", id="ix_04keys-addresses-asciidoc10", range="startofrange")))以太坊使用与比特币完全相同的椭圆曲线 secp256k1。 这使得重用许多来自比特币的椭圆曲线库和工具成为可能。
====

[[ecc-curve]]
.一条椭圆曲线的可视化
image::images/simple_elliptic_curve.png["椭圆曲线"]

以太坊使用特定的椭圆曲线和一组数学常数，如美国国家标准与技术研究院（NIST）制定的标准 +secp256k1+ 中所定义。 +secp256k1+ 曲线由以下函数定义，该函数生成椭圆曲线：

++++
<div data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mrow>
      <msup><mi>y</mi> <mn>2</mn> </msup>
      <mo>=</mo>
      <mrow>
        <mo>(</mo>
        <msup><mi>x</mi> <mn>3</mn> </msup>
        <mo>+</mo>
        <mn>7</mn>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mspace width="3.33333pt"/>
    <mtext>over</mtext>
    <mspace width="3.33333pt"/>
    <mrow>
      <mo>(</mo>
      <msub><mi>&#x1d53d;</mi> <mi>p</mi> </msub>
      <mo>)</mo>
    </mrow>
  </mrow>
</math>
</div>
++++

or:

++++
<div data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <msup><mi>y</mi> <mn>2</mn> </msup>
    <mspace width="3.33333pt"/>
    <mo form="prefix">mod</mo>
    <mspace width="0.277778em"/>
    <mi>p</mi>
    <mo>=</mo>
    <mrow>
      <mo>(</mo>
      <msup><mi>x</mi> <mn>3</mn> </msup>
      <mo>+</mo>
      <mn>7</mn>
      <mo>)</mo>
    </mrow>
    <mspace width="3.33333pt"/>
    <mo form="prefix">mod</mo>
    <mspace width="0.277778em"/>
    <mi>p</mi>
  </mrow>
</math>
</div>
++++

模 p (模素数 p)表示该曲线在素数阶 _p_ 的有限域上，写为latexmath:[\( \mathbb{F}_p \)] ，其中 _p_ = 2^256^ – 2^32^ – 2^9^ – 2^8^ – 2^7^ – 2^6^ – 2^4^ – 1 是一个非常大的素数。

因为这条曲线是定义在素数阶的有限域上，而不是定义在实数上，所以它看起来就像散落在二维中的点的图案，这使得它很难被可视化。然而，数学上是相同的， 即都是椭圆曲线上的实数。例如，<<ecc-over-F17-math>> 在一个更小的17阶有限域上显示相同的椭圆曲线，显示网格上的点状图案。+secp256k1+ 以太坊椭圆曲线可以看作是一个难以理解的大网格上更为复杂的点图案。

[[ecc-over-F17-math]]
[role="smallersixty"]
.椭圆曲线密码学：在F(p)上可视化椭圆曲线，p = 17
image::images/ec_over_small_prime_field.png["ecc-over-F17-math"]

例如，下面是一坐标 (_x_,_y_)上的点 _Q_，它是 +secp256k1+ 曲线上的一个点:

[[coordinates_example]]
----
Q =
(49790390825249384486033144355916864607616083520101638681403973749255924539515,
59574132161899900045862086493921015780032175291755807399284007721050341297360)
----

<<example_1>>展示了如何使用Python自己检查这一点。变量x和y是点q的坐标，如前面的示例所示。变量p是椭圆曲线的素数阶(用于所有模运算的素数)。Python的最后一行是椭圆曲线方程(Python中的%操作符是取模操作符)。如果x和y确实是椭圆曲线上某一点的坐标，则它们满足方程且结果为零(0L是一个值为零的长整数)。自己尝试一下，方法是在命令行上键入++**python**++，然后从列表中复制每一行。(((range="endofrange", startref="ix_04keys-addresses-asciidoc10"))).(((range="endofrange", startref="ix_04keys-addresses-asciidoc9")))

++++
<div data-type="example" id="example_1">
<h5>使用 Python 确认该点在椭圆曲线上</h5>
<pre data-type="programlisting">
Python 3.4.0 (default, Mar 30 2014, 19:23:13)
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.38)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> <strong>p = 115792089237316195423570985008687907853269984665640564039457584007908834 \
671663</strong>
>>> <strong>x = 49790390825249384486033144355916864607616083520101638681403973749255924539515</strong>
>>> <strong>y = 59574132161899900045862086493921015780032175291755807399284007721050341297360</strong>
>>> <strong>(x ** 3 + 7 - y**2) % p</strong>
0L
</pre>
</div>
++++

[[EC_math]]
====  椭圆曲线算术运算

((("elliptic curve cryptography","arithmetic operations")))很多椭圆曲线的数学看起来非常像我们在学校学到的整数运算。 具体来说，我们可以定义一个加法运算符，它不是沿着数字线跳跃而是跳到曲线上的其他点。 一旦我们有了加法运算符，我们也可以定义一个点和一个整数的乘法，这相当于重复加法运算。

椭圆曲线加法定义，椭圆曲线上有两个点_P_~1~ 和 _P_~2~，第三个点_P_~3~ = _P_~1~ + _P_~2~，也在椭圆曲线上。

几何上，通过在 _P_~1~ 和 _P_~2~之间画线来计算该第三点 _P_~3~。 这条线将在一个额外的位置（令人惊讶地）与椭圆曲线相交。 称此点为 _P_~3~' = (_x_, _y_)。 然后在x轴上反射得到 _P_~3~ = (_x_, _–y_)。

如果 _P_~1~ 和 _P_~2~ 是同一点，那么 _P_~1~ 和 _P_~2~ 之间的直线应该延伸到与此点 _P_~1~ 的曲线相切。 这个切线将在一个新点上与曲线相交。 你可以用微积分的方法来确定切线的斜率。 奇怪的是，即使我们将兴趣限制在两个整数坐标的曲线上的点上，这些技术还是有效的！

在椭圆曲线数学中，还有一个称为“无穷远点”的点，它大致对应于数字零的作用。 在计算机上，它有时用_x_ = _y_ = 0 表示（它不满足椭圆曲线方程，但它是一个容易分离的情况，可以检查）。 有几个特殊情况可以解释无限远点的必要性。

在某些情况下(例如，如果 _P_~1~ and _P_~2~ 具有相同的 _x_ 值，但是 _y_ 值不同) ，这条直线将完全垂直，在这种情况下，_P_~3~ 是无穷远点。

如果 _P_~1~ 是无穷远处的点，那么 _P_~1~ + _P_~2~ = _P_~2~ 。 类似地，如果 _P_~2~ 是无穷远处的点，那么 _P_~1~ + _P_~2~ = _P_~1~ 。 这显示了无穷远处的点如何扮演零在“正常”算术中扮演的角色。

事实证明 pass:[+] 号是关联的，这意味着（(_A_ pass:[+] _B_) pass:[+] _C_ = _A_ pass:[+] (_B_ pass:[+] _C_). 这意味着我们可以在没有歧义的情况下编写  _A_ pass:[+] _B_ pass:[+] _C_ （没有括号）。

现在我们已经定义了加法，我们可以用扩展加法的标准方式定义乘法。 对于椭圆曲线上的点 _P_，如果 _k_ 是整数，则 _k_ pass:[*] _P_ = _P_ pass:[+] _P_ pass:[+] _P_ pass:[+] ... pass:[+] _P_ （k次）。 注意，在这种情况下，_k_ 有时（可能容易混淆）称为“指数”。(((range="endofrange", startref="ix_04keys-addresses-asciidoc8")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc7"))

[[public_key_derivation]]
==== 生成公钥

((("elliptic curve cryptography","public key generation with")))((("generator point")))((("public keys","generating")))从随机生成的数字 _k_ 作为私钥开始，我们将其乘以曲线上称为生成点G的预定点，以在曲线上的其他位置生成另一个点，即相应的公钥 _K_：

++++
<div data-type="equation">
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mi>K</mi>
    <mo>=</mo>
    <mi>k</mi>
    <mo>*</mo>
    <mi>G</mi>
  </mrow>
</math>
</div>
++++

((("secp256k1 elliptic curve")))生成器点被指定为 +secp256k1+ 标准的一部分; 它对于 +secp256k1+ 的所有实现都是相同的，并且从该曲线派生的所有键使用相同的点 _G_.因为所有以太坊用户的生成点始终相同，所以私钥 _k_ 乘以 _G_ 将始终导致相同的公钥 _K_. _k_ 和 _K_之间的关系是固定的，但只能在一个方向上计算，从_k_ 到 _K_.这就是为什么以太坊地址（从 _K_ 派生）可以与任何人共享并且不会泄露用户的私钥（_k_）。

正如我们在前一节中所描述的，_k_ * _G_ 的乘法等效于重复加法，因此 _G_ pass:[+] _G_ pass:[+] _G_ pass:[+] ... pass:[+] _G_ ，重复 _k_ 次。 总之，为了从私钥 _k_ 产生公钥 _K_，我们将生成点 _G_ 添加到其自身 _k_ 次。

[TIP]
====
私钥可以转换为公钥，但不能将公钥转换回私钥，因为数学只能以一种方式工作。
====

让我们应用这个计算来找到我们在 <<private_keys>> 中展示的特定私钥的公钥:


[[example_privkey]]
.私钥到公钥的计算样例
----
K = f8f8a2f43c8376ccb0871305060d7b27b0554d2cc72bccf41b2705608452f315 * G
----

一个加密库可以帮助我们计算 _K_，使用椭圆曲线乘法。 得到的公钥 _K_ 被定义为点:

----
K = (x, y)
----

这里:

----
x = 6e145ccef1033dea239875dd00dfb4fee6e3348b84985c92f103444683bae07b
y = 83b5c38e5e2b0c8529d7fa3f64d46daa1ece2d9ac14cab9477d042c84c32ccd0
----

((("SECG (Standards for Efficient Cryptography Group)")))((("Standards for Efficient Cryptography Group (SECG)")))在以太坊中，你可以看到公钥表示为130个十六进制字符(65位)的序列化。 这是从行业联盟高效密码组标准(SECG)提出的标准序列化格式中采用的，该标准在 http://www.secg.org/sec1-v2.pdf[高效密码标准(SEC1)]中有记录。 该标准定义了四个可能的前缀，可用于标识椭圆曲线上的点，见 <<EC_prefix_table>>

[[EC_prefix_table]]
.序列化的 EC 公钥前缀
[options="header"]
|===
| 前缀 | 含义 |  长度(字节计数前缀)
| +0x00+ | 无穷远点 | 1
| +0x04+ | 未压缩点 | 65
| +0x02+ | 压缩点偶数 +y+ | 33
| +0x03+ | 压缩点奇数 +y+ | 33
|===

以太坊只使用未压缩的公钥; 因此唯一相关的前缀是(十六进制)04。 序列化连接公钥的_x_ 和 _y_ 坐标:

[[concat_coordinates]]
----
04 + x-coordinate (32 bytes/64 hex) + y-coordinate (32 bytes/64 hex)
----

因此，我们前面计算的公钥序列化为:

[[serialized_pubkey]]
----
046e145ccef1033dea239875dd00dfb4fee6e3348b84985c92f103444683bae07b83b5c38e5e2b0 \
c8529d7fa3f64d46daa1ece2d9ac14cab9477d042c84c32ccd0
----

[[EC_lib]]
==== 椭圆曲线库

((("elliptic curve cryptography","libraries")))((("secp256k1 elliptic curve")))有几个 +secp256k1+ 椭圆曲线的实现用于加密货币相关的项目:

((("OpenSSL cryptographic library")))https://www.openssl.org/[OpenSSL]:: 库提供了一套完整的加密原语，包括 +secp256k1+ 的完整实现。 例如，要派生公钥，可以使用函数 +EC_POINT_mul+

((("libsecp256k1 cryptographic library")))https://github.com/bitcoin-core/secp256k1[libsecp256k1]:: 比特币核心的 +libsecp256k1+ 是 +secp256k1+ 椭圆曲线和其他密码原语的C语言实现。 它是为了在比特币核心软件中取代 OpenSSL 而从头开始编写的，被认为在性能和安全性方面都有优势。(((range="endofrange", startref="ix_04keys-addresses-asciidoc6")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc5")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc4")))

[[hash_functions]]
=== 加密哈希函数

((("cryptographic hash functions", id="ix_04keys-addresses-asciidoc11", range="startofrange")))((("cryptography","hash functions", id="ix_04keys-addresses-asciidoc12", range="startofrange")))((("hash functions", id="ix_04keys-addresses-asciidoc13", range="startofrange")))整个以太坊系统都使用加密哈希函数。 事实上，哈希函数在几乎所有的密码系统中都得到了广泛的应用&#x2014;密码学家((("Schneier, Bruce")))pass:[<span class="keep-together">cryptographer</span>] http://bit.ly/2Q79qZp[Bruce Schneier]抓住了这一事实，他说,"单向散列函数远不止是加密算法，它是现代密码学的主力。"

在本节中，我们将讨论哈希函数，探索它们的基本属性，并了解这些属性如何使它们在现代密码学的许多领域中如此有用。 我们在这里讨论哈希函数，因为它们是将以太坊公钥转换为地址的一部分。((("digital fingerprint"))) 它们也可以用来创建数字指纹，这有助于数据的验证。

((("one-way functions")))简单来说，http://bit.ly/2CR26gD[_哈希函数_]是"任何可用于将任意大小的数据映射到固定大小的数据的函数"， ((("pre-image")))哈希函数的输入称为预映像、消息或简单的输入数据。 输出称为散列。 http://bit.ly/2Jrn3jM[_加密哈希函数_]是一种特殊的子类别，它具有对于安全平台(如以太坊)有用的特定属性

密码哈希函数是一个单向哈希函数，它将任意大小的数据映射到一个固定大小的位字符串。 "单向"性质意味着，如果只知道输出散列，那么在计算上重新创建输入数据是不可行的。 确定一个可能的输入的唯一方法是执行一个暴力搜索法，检查每个候选者的匹配输出; 考虑到搜索空间实际上是无限的，很容易理解任务的实际不可能性。 即使您找到了一些创建匹配哈希的输入数据，它也可能不是原始输入数据: 哈希函数是"多对一"函数。((("hash collision"))) 查找两组输入数据散列到相同的输出被称为查找散列冲突。 粗略地说，哈希函数越好，哈希碰撞可能性就越小。 对于以太坊来说，他们实际上是不可能的。

((("hash functions","main properties")))让我们进一步了解一下加密哈希函数的主要属性。 其中包括:

确定性:: 给定的输入消息总是产生相同的哈希输出。

可验证性:: 计算消息的哈希是高效的(线性复杂度)。

敏感性:: 对消息的小的改变（例如，1比特的改变）应该大幅度改变哈希输出，使得它不能与原始消息的散列相关联。

不可逆性:: 从哈希计算消息是不可行的，相当于通过所有可能的消息进行暴力搜索。

碰撞保护:: 计算产生相同哈希输出的两个不同消息应该是不可行的

防止哈希碰撞对于避免在以太坊中伪造数字签名特别重要。

这些属性的组合使得加密哈希函数对于广泛的安全应用程序非常有用，包括:

* 数据指纹识别
* 消息完整性(错误检测)
* 工作量证明
* 身份验证(密码哈希和密钥扩展)
* 伪随机数生成器
* 消息提交(commit-reveal 机制)
* 唯一标识符

随着我们在这个系统的各个层面上不断进展，我们会在以太坊中发现许多这样的例子。

[[keccak256]]
==== 以太坊的密码哈希函数: Keccak-256

((("hash functions","Keccak-256")))((("Keccak-256 hash function")))((("SHA-3 Hash Function")))在许多地方，以太坊使用 _Keccak-256_ 密码哈希函数。 _Keccak-256_ 是为参加2007年由((("National Institute of Science and Technology (NIST)")))((("NIST (National Institute of Science and Technology)")))国家科学技术研究所举办的 SHA-3密码哈希函数竞赛而设计的。 Keccak 是获胜的算法，它在2015年被标准化为((("Federal Information Processing Standard (FIPS)")))((("FIPS (Federal Information Processing Standard)")))((("FIPS-202")))联邦信息处理标准(FIPS)202。

然而，在以太坊的开发阶段，NIST 的标准化还没有最后确定。 NIST 在完成标准程序后调整了 Keccak 的一些参数，据称是为了提高效率。 与此同时，英勇的告密者((("Snowden, Edward")))爱德华 · 斯诺登披露了一些文件，这些文件暗示 NIST 可能受到了美国国家安全局的不当影响，故意削弱了 ((("Dual_EC_DRBG")))Dual_EC_DRBG 随机数生成器标准，有效地在标准随机数生成器中放置了一个后门。 这一争议的结果是对所提议的修改的强烈反对和 SHA-3标准化的重大延误。 当时，伊斯利恩基金会决定实现其发明者提出的原始 Keccak 算法，而不是 NIST 修改的 SHA-3标准。

[WARNING]
====
虽然您可以在整个以太坊文档和代码中看到提到"SHA-3"，但实际上许多(如果不是所有的话)实例都引用了 Keccak-256，而不是最终确定的 FIPS-202 SHA-3标准。 实现上的差异很小，与填充参数有关，但是它们很重要，因为 Keccak-256为相同的输入从 FIPS-202 SHA-3生成不同的哈希输出。
====

[[which_hash]]
====  我正在使用哪个哈希函数？

((("hash functions","test vector for determining")))((("test vector, determining hash functions with")))如果两者都可能被称为"SHA-3"， 如何判断你正在使用的软件库是否实现了 FIPS-202 SHA-3或 Keccak-256？

一个简单的方法是使用测试向量，一个给定输入的期望输出。 ((("empty input test"))) 哈希函数最常用的测试是空输入。 如果你用一个空字符串作为输入运行散列函数，你会看到以下结果:

----
Keccak256("") =
  c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

SHA3("") =
  a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a
----

无论调用的是什么函数，你都可以通过运行这个简单的测试来测试它，看看它是最初的 Keccak-256还是最终的 NIST 标准 FIPS-202 SHA-3。 记住，以太坊使用 Keccak-256，尽管它在代码中通常被称为 SHA-3。

[NOTE]
====
由于以太坊(Keccak-256)中使用的哈希函数与最终标准(FIP-202 SHA-3)之间的差异造成了混淆，目前正在努力将所有代码、操作码和库中的所有 sha3实例重命名为 keckcak256。 详情请参阅 https://github.com/ethereum/EIPs/issues/59[ERC59]。
====


接下来，让我们研究一下 Keccak-256在以太坊中的第一个应用，即从公钥生成 Ethereum 地址.(((range="endofrange", startref="ix_04keys-addresses-asciidoc13")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc12")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc11")))

[[eth_address]]
=== 以太坊地址

((("addresses", id="ix_04keys-addresses-asciidoc14", range="startofrange")))((("cryptography","Ethereum addresses and", id="ix_04keys-addresses-asciidoc15", range="startofrange")))以太坊地址是使用 Keccak-256单向哈希函数从公钥或合约中派生出来的唯一标识符。

在前面的例子中，我们从一个私钥开始，使用椭圆曲线乘法得到一个公钥:

[role="pagebreak-before"]
Private key _k_:

----
k = f8f8a2f43c8376ccb0871305060d7b27b0554d2cc72bccf41b2705608452f315
----

[[concat_pubkey]]
Public key _K_ (_x_ and _y_ coordinates concatenated and shown as hex):

----
K = 6e145ccef1033dea239875dd00dfb4fee6e3348b84985c92f103444683bae07b83b5c38e5e...
----

[NOTE]
====
值得注意的是，在计算地址时，公钥没有使用前缀(十六进制) +04+ 进行格式化。
====

我们使用 Keccak-256来计算这个公钥的哈希:

[[calculate_hash]]
----
Keccak256(K) = 2a5bc342ed616b5ba5732269001d3f1ef827552ae1114027bd3ecf1f086ba0f9
----

然后我们只保留最后20位(最低有效字节) ，这是我们的以太坊地址:

[[keep_last_20]]
----
001d3f1ef827552ae1114027bd3ecf1f086ba0f9
----

大多数情况下，你会看到前缀为0x 的以太坊地址，表明它们是十六进制编码的，像这样:

[[hex_prefix]]
----
0x001d3f1ef827552ae1114027bd3ecf1f086ba0f9
----

[[eth_address_format]]
==== 以太坊地址格式

((("addresses","formats")))以太坊地址是十六进制的数字，标识符派生自 Keccak-256公钥哈希的最后20位。

((("checksum","in Ethereum address formats")))比特币地址编码在所有客户端的用户界面中，包括内置校验以防止误输入，与比特币地址不同，以太坊地址以原始十六进制形式呈现，没有任何校验和。

这个决定背后的基本原理是，以太坊地址最终将隐藏在系统更高层的抽象层(例如名称服务)之后，如果需要的话，校验码应该添加到更高层。.

实际上，这些较高层的开发过于缓慢，这种设计选择在生态系统的早期导致了一些问题，包括由于错误的地址和输入验证错误而造成的资金损失。此外，由于以太坊名称服务的发展比最初预期的要慢，钱包开发商采用替代编码的速度非常缓慢。 接下来我们将研究一些编码选项。

[[ICAP]]
==== 互换客户端地址协议

((("addresses","ICAP encoding", id="ix_04keys-addresses-asciidoc16", range="startofrange")))((("ICAP (Inter-exchange Client Address Protocol)", id="ix_04keys-addresses-asciidoc17", range="startofrange")))((("Inter-exchange Client Address Protocol (ICAP)", id="ix_04keys-addresses-asciidoc18", range="startofrange")))互换客户端地址协议(ICAP)是一种以太坊地址编码，它部分兼容国际银行账号 ((("IBAN (International Bank Account Number)")))((("International Bank Account Number (IBAN)")))(IBAN)编码，为以太坊地址提供了一种通用的、带校验码的和可互操作的编码。 ICAP 地址可以编码以太坊地址或在以太坊名称注册中心注册的普通名称。 你可以在 http://bit.ly/2JsZHKu[Ethereum Wiki]上阅读更多关于 ICAP 的内容。

IBAN是识别银行账号的国际标准，主要用于电汇。 它在欧洲单一欧元支付区（SEPA）及其他地区被广泛采用。 IBAN是一种集中且严格监管的服务。 ICAP是去中心化但和以太坊地址兼容的实现。

IBAN由最多34个字母数字字符组成的字符串(不区分大小写) ，包括国家代码、校验和和银行帐户标识符(国家特定)。

ICAP 采用了同样的结构，引入了一个非标准的国家代码 &#x201c;XE,&#x201d;，代表"Ethereum,&#x201d; 后面跟着一个两个字符的校验和和一个账户标识符的三种可能变体:

Direct:: 一个big-endian base-36整数，由最多30个字母数字字符组成，代表以太坊地址的155个最低有效位。 由于此编码比一般以太网地址的完整160位小，因此它仅适用于以一个或多个零字节开头的以太坊地址。 优点是它在字段长度和校验和方面与IBAN兼容。 示例：+XE60HAMICDXSV5QXVJA7TJW47Q9CHWKJD+（长度为33个字符）。

Basic:: 与 Direct 编码相同，只是长度为31个字符。 这允许它对任何以太网地址进行编码，但使其与 IBAN 字段验证不兼容。 示例: +XE18CHDJBPLTBCJ03FE9O2NS0BPOJVQCU2P+ (35个字符长)。

Indirect:: 对通过名称注册表提供程序解析为以太坊地址的标识符进行编码。 它使用16个字母数字字符，包括一个资产标识符(例如，ETH)、一个名称服务(例如，XREG)和一个9字符的人类可读名称(例如，KITTYCATS)。 示例: +XEpass:[##]ETHXREGKITTYCATS+ (20个字符长) ，其中 +##+ 应由两个计算校验和字符替换。


((("EthereumJS helpeth")))((("helpeth command-line tool")))我们可以使用 +helpeth+ 命令行工具来创建 ICAP 地址。 让我们使用我们的示例私钥(前缀为0x，并作为参数传递给 +helpeth+) :

++++
<pre data-type="programlisting">
$ <strong>helpeth keyDetails \
  -p 0xf8f8a2f43c8376ccb0871305060d7b27b0554d2cc72bccf41b2705608452f315</strong>

Address: 0x001d3f1ef827552ae1114027bd3ecf1f086ba0f9
ICAP: XE60 HAMI CDXS V5QX VJA7 TJW4 7Q9C HWKJ D
Public key: 0x6e145ccef1033dea239875dd00dfb4fee6e3348b84985c92f103444683bae07b...
</pre>
++++

+helpeth+ 命令为我们构造十六进制的以太坊地址以及 ICAP 地址。 我们示例密钥的ICAP 地址是:

[[ICAP_example]]
----
XE60HAMICDXSV5QXVJA7TJW47Q9CHWKJD
----

因为我们的示例以太坊地址碰巧以零字节开头，所以可以使用在 IBAN 格式中有效的 Direct ICAP 编码方法对它进行编码。 你可以看出来，因为它有33个字符长。

如果我们的地址没有以零开头，它将被编码为 Basic 编码，这将是35个字符长和无效的 IBAN。

[TIP]
====
任何以零字节开头的空位地址的几率是1/256。要生成这样一个密钥，我们需要平均256次尝试，使用256个不同的随机私钥，才能找到一个可以作为 IBAN 兼容的"Direct"编码的ICAP地址密钥。
====

不幸的是，目前 ICAP 只有少数几个钱包支持。(((range="endofrange", startref="ix_04keys-addresses-asciidoc18")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc17")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc16")))

[[EIP55]]
==== 十六进制大小写校验和编码 (EIP-55)

((("addresses","hex encoding with checksum in capitalization (EIP-55)", id="ix_04keys-addresses-asciidoc19", range="startofrange")))((("checksum","EIP-55 and", id="ix_04keys-addresses-asciidoc20", range="startofrange")))((("EIP-55 (Ethereum Improvement Proposal 55)","checksum for addresses", id="ix_04keys-addresses-asciidoc21", range="startofrange")))由于ICAP和名称服务的部署缓慢，https://github.com/Ethereum/EIPs/blob/master/EIPS/eip-55.md[Ethereum Improvement Proposal 55 (EIP-55)] 提出了一个标准。 EIP-55通过修改十六进制地址的大写，为以太坊地址提供向后兼容的校验和。 这个想法是以太坊地址不区分大小写，并且所有钱包都应该接受以大写或小写字母表示的以太坊地址，而在解释上没有任何区别。

通过修改地址中字母字符的大小写，我们可以传递一个校验和，这个校验和可以用来保护地址的完整性，防止输错或阅读错误。 不支持 EIP-55校验和的钱包只是忽略了地址包含混合大小写的事实，但是那些支持它的钱包可以验证它并以99.986% 的准确率检测错误。

混合大写的编码很微妙，你可能一开始并没有注意到。 我们的示例地址是:

----
0x001d3f1ef827552ae1114027bd3ecf1f086ba0f9
----

如果是 EIP-55混合编码，它会变成:

[[mixed_capitalization]]
----
0x001d3F1ef827552Ae1114027BD3ECF1f086bA0F9
----

你能分辨出其中的区别吗？ 十六进制字母表中的一些字符(A&#x2013;F)现在是大写，而另一些是小写。

Eip-55的实现相当简单。 我们采用小写十六进制地址的 Keccak-256哈希。 这个哈希作为地址的数字指纹，给我们一个方便的校验和。 输入(地址)的任何微小变化都会导致结果哈希(校验和)的巨大变化，从而使我们能够有效地检测错误。 然后将地址的哈希编码在地址本身的大小写中。 让我们一步一步地把它分解:

1. 哈希小写地址，不带 +0x+ 前缀:

[[hash_lower_case_address]]
----
Keccak256("001d3f1ef827552ae1114027bd3ecf1f086ba0f9") =
23a69c1653e4ebbb619b0b2cb8a9bad49892a8b9695d9a19d8f673ca991deae1
----

[start=2]
1. 如果散列的对应十六进制数字大于或等于 +0x8+，则将每个字母地址字符大写。 如果我们把地址和哈希列在一起，这样更容易显示:

[[capitalize_input]]
----
Address: 001d3f1ef827552ae1114027bd3ecf1f086ba0f9
Hash   : 23a69c1653e4ebbb619b0b2cb8a9bad49892a8b9...
----

我们的地址在第四个位置有一个字母 d。 散列的第四个字符是6，小于8。 所以，我们留下 d 小写。 我们地址中下一个字母字符是 f，在第六个位置。 十六进制散列的第六个字符是 c，大于8。 因此，我们将地址中的 f 大写，以此类推。 如您所见，我们只使用散列的前20个字节(40个十六进制字符)作为校验和，因为地址中只有20个字节(40个十六进制字符)来适当地大写。

检查产生的混合大写地址，看看是否可以告诉哪些字符大写，以及它们对应于地址散列中的哪些字符:

[[capitalize_output]]
----
Address: 001d3F1ef827552Ae1114027BD3ECF1f086bA0F9
Hash   : 23a69c1653e4ebbb619b0b2cb8a9bad49892a8b9...
----

[[EIP55_error]]
===== 检测 EIP-55编码地址中的错误

((("EIP-55 (Ethereum Improvement Proposal 55)","detecting an error in an encoded address")))现在，让我们来看看 EIP-55地址如何帮助我们发现错误。 让我们假设我们打印出了一个以太坊的地址，它是 EIP-55编码的:

[[correct_address]]
----
0x001d3F1ef827552Ae1114027BD3ECF1f086bA0F9
----

现在让我们在阅读这个地址时犯一个基本的错误。 最后一个字符前面的字符是大写的 +F+。在这个例子中，假设我们把它误读为大写的 +E+，然后在钱包中输入以下(错误的)地址:

[[incorrect_address]]
----
0x001d3F1ef827552Ae1114027BD3ECF1f086bA0E9
----

幸运的是，我们的钱包符合 EIP-55标准！ 它注意到了混合大小写，并尝试验证地址。 它将其转换为小写，并计算校验和哈希:

[[hash_demo]]
----
Keccak256("001d3f1ef827552ae1114027bd3ecf1f086ba0e9") =
5429b5d9460122fb4b11af9cb88b7bb76d8928862e0a57d46dd18dd8e08a6927
----

As you can see, even though the address has only changed by one character (in fact, only one bit, as +e+ and +f+ are one bit apart), the hash of the address has changed radically. That's the property of hash functions that makes them so useful for checksums!

如你所见，即使地址只改变了一个字符(实际上只改变了一个位，因为 +e+ 和 +f+ 只有一个位) ，地址的哈希也发生了根本性的变化。 这就是哈希函数的特性，使得它们对校验和非常有用！

现在，让我们把这两个对齐，检查一下大小写:

[[incorrect_capitalization]]
----
001d3F1ef827552Ae1114027BD3ECF1f086bA0E9
5429b5d9460122fb4b11af9cb88b7bb76d892886...
----

一切都错了！ 有几个字母字符的大写不正确。 请记住，大写是正确校验和的编码。

我们输入的地址的大小写与刚才计算的校验和不匹配，这意味着地址发生了变化，并且引入了一个错误。(((range="endofrange", startref="ix_04keys-addresses-asciidoc21")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc20")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc19"))).(((range="endofrange", startref="ix_04keys-addresses-asciidoc15")))(((range="endofrange", startref="ix_04keys-addresses-asciidoc14")))


[[keys-addresses-conclusions]]
=== 小结

在本章中，我们简要介绍了公钥加密技术，重点介绍了以太坊公钥和私钥的使用，以及哈希函数等加密工具在创建和验证以太坊地址方面的应用。 我们还研究了数字签名，以及它们如何能够证明私钥的所有权而不泄露私钥。 在<<wallets_chapter>> ，我们将把这些想法放在一起，看看钱包如何可以用来管理收集的钥匙。(((range="endofrange", startref="ix_04keys-addresses-asciidoc0")))
